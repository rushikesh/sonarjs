var js = [{"rule":{"key":"javascript:S1219","repo":"javascript","name":"\"switch\" statements should not contain non-case labels","createdAt":"2014-01-24T08:40:40+0000","severity":"CRITICAL","status":"READY","internalKey":"S1219","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing error.\n</p>\n\n<h2>Noncompliant Code Examples</h2>\n<p>Case 1, the code is syntactically correct but the behaviour is not the expected one</p>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   //instead of \"case WEDNESDAY\"\n    doSomething();\n    break;\n  ...\n}\n</pre>\n<p>Case 2, the code is correct and behaves as expected but is hardly readable</p>\n<pre>\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(i = 0 ; i < X ; i++) {\n         /* ... */\n        break foo;  //This break statement doesn't relate to the nesting case TUESDAY\n         /* ... */\n    }\n    break;\n    /* ... */\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<p>Case 1</p>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n</pre>\n<p>Case 2</p>\n<pre>\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); //Put the content of the labelled \"for\" statement in a dedicated method\n    break;\n\n    /* ... */\n}\n</pre>","debtOverloaded":false,"params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"javascript:S878","repo":"javascript","name":"Comma operator should not be used","createdAt":"2014-01-24T08:40:40+0000","severity":"MAJOR","status":"READY","internalKey":"S878","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  The comma operator takes two expressions, execute them from left to right and return the result of the second one. Use of this operator is generally detrimental to the readability and reliability of code, and the same effect can be achieved by other means.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\ni = a += 2, a + b;  //What's the value of i?\n</pre>\n\n\n<h2>Compliant Solution</h2>\n<pre>\na +=  2;\ni = a + b;\n</pre>\n\n<h2>Exceptions</h2>\n<p>\n  Use of comma operator is tolerated in initialization and increment expressions of <code>for</code> loop\n</p>\n<pre>\nfor(i = 0, j = 5; i < 6; i++, j++) {\n}\n</pre>","debtOverloaded":false,"params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:S1264","repo":"javascript","name":"A \"while\" loop should be used instead of a \"for\" loop","createdAt":"2014-01-24T08:40:40+0000","severity":"MINOR","status":"READY","internalKey":"S1264","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  When only the condition expression is defined in a \"for\" loop, but the init and increment expressions are missing, a \"while\" loop should be used instead to increase readability.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor(;condition;) {...}\n</pre>\n\n\n<h2>Compliant Solution</h2>\n<pre>\nwhile(condition) {...}\n</pre>","debtOverloaded":false,"params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"javascript:S1125","repo":"javascript","name":"Literal boolean values should not be used in condition expressions","createdAt":"2014-01-24T08:40:40+0000","severity":"MINOR","status":"READY","internalKey":"S1125","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  Remove literal boolean values from conditional expressions to improve readability. Anything that can be tested for equality with a boolean value must itself be a boolean value, and boolean values can be tested atomically.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanVariable == true) { /* ... */ }\nif (booleanVariable != true) { /* ... */ }\nif (booleanVariable || false) { /* ... */ }\ndoSomething(!false);\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanVariable) { /* ... */ }\nif (!booleanVariable) { /* ... */ }\nif (booleanVariable) { /* ... */ }\ndoSomething(true);\n</pre>","debtOverloaded":false,"params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"javascript:S1126","repo":"javascript","name":"Return of boolean expressions should not be wrapped into an \"if-then-else\" statement","createdAt":"2014-01-24T08:40:40+0000","severity":"MINOR","status":"READY","internalKey":"S1126","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.\n</p>\n<p>\n  Sometimes the developer will not have the time or will simply forget to get back to that tag.\n  This rule is meant to track those tags, and ensure that they do not go unnoticed.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition) {\n  return true;\n} else {\n  return false;\n}\n</pre>\n\n\n<h2>Compliant Solution</h2>\n<pre>\nreturn condition;\n</pre>\n<p>Note that if type of condition is not boolean, then double negation should be used for proper conversion:</p>\n<pre>\nreturn !!condition;\n</pre>","debtOverloaded":false,"params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"javascript:S100","repo":"javascript","name":"Function names should comply with a naming convention","createdAt":"2014-01-24T08:40:40+0000","severity":"MAJOR","status":"READY","internalKey":"S100","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all function names match a provided regular expression.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction DoSomething(){...}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething(){...}\n</pre>","debtOverloaded":false,"params":[{"key":"format","htmlDesc":"Regular expression used to check the function names against.","type":"STRING","defaultValue":"^[a-z][a-zA-Z0-9]*$"}]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[{"key":"format","value":"^[a-z][a-zA-Z0-9]*$"}]}]},{"rule":{"key":"javascript:S1472","repo":"javascript","name":"Function call arguments should not start on new line","createdAt":"2014-01-24T08:40:40+0000","severity":"CRITICAL","status":"READY","internalKey":"S1472","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  Because semicolons at the ends of statements are optional, starting function call arguments on a separate line makes the code confusing and might lead to errors.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar fn = function () {\n  //...\n}\n\n(function () { // Noncompliant\n  //...\n})();\n</pre>\n<p>\n  What was the initial purpose of the developer?\n\n    <ol>\n      <li>Was it to define a function and then to execute some unrelated code inside a closure?</li>\n      <li>Or to pass the second function as a parameter to the first one?</li>\n    </ol>\n</p>\n<p>\n  The first option will be the one chosen by the JavaScript interpreter.\n</p>\n\n<h2>Compliant Solution</h2>\n<p>\n  Either\n</p>\n<pre>\n// define a function\nvar fn = function () {\n  //...\n}; // <-- semicolon added\n\n// then execute some code inside a closure\n(function () {\n  //...\n})();\n</pre>\n<p>\n  or\n</p>\n<pre>\nvar fn = function () {\n  //...\n}(function () { // <-- start function call arguments on same line\n  //...\n})();\n</pre>\n<p>\n  By extension and to improve readability, any kind of function call arguments should not start on new line.\n</p>","debtOverloaded":false,"params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"javascript:S1067","repo":"javascript","name":"Expressions should not be too complex","createdAt":"2014-01-24T08:40:40+0000","severity":"MAJOR","status":"READY","internalKey":"S1067","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  The complexity of an expression is defined by the number of <code>&&</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code> operators it contains.</br>\n  A single expression's complexity should not become too high to keep the code readable.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>\n  With the default threshold value 3\n</p>\n<pre>\nif (((condition1 && condition2) || (condition3 && condition4)) && condition5) { }\n</pre>\n\n\n<h2>Compliant Solution</h2>\n<pre>\nif ( (myFirstCondition() || mySecondCondition()) && myLastCondition()) { }\n</pre>","debtOverloaded":false,"params":[{"key":"max","htmlDesc":"Maximum number of allowed conditional operators in an expression","type":"INTEGER","defaultValue":"3"}]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[{"key":"max","value":"3"}]}]},{"rule":{"key":"javascript:S1135","repo":"javascript","name":"\"TODO\" tags should be handled","createdAt":"2014-01-24T08:40:40+0000","severity":"INFO","status":"READY","internalKey":"S1135","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  <code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.\n</p>\n<p>\n  Sometimes the developer will not have the time or will simply forget to get back to that tag.\n  This rule is meant to track those tags, and ensure that they do not go unnoticed.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction doSomething() {\n  // TODO\n}\n</pre>","debtOverloaded":false,"params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"INFO","params":[]}]},{"rule":{"key":"javascript:S1134","repo":"javascript","name":"\"FIXME\" tags should be handled","createdAt":"2014-01-24T08:40:40+0000","severity":"MAJOR","status":"READY","internalKey":"S1134","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  <code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.\n</p>\n<p>\n  Sometimes the developer will not have the time or will simply forget to get back to that tag.\n  This rule is meant to track those tags, and ensure that they do not go unnoticed.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction divide(numerator, denominator) {\n  return numerator / denominator;              // FIXME denominator value might be  0\n}\n</pre>","debtOverloaded":false,"params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:S104","repo":"javascript","name":"Files should not have too many lines","createdAt":"2014-01-24T08:40:40+0000","severity":"MAJOR","status":"READY","internalKey":"S104","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.</br>\n  Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks.</br>\n  Those smaller files will not only be easier to understand but also probably easier to test.\n</p>","debtOverloaded":false,"params":[{"key":"maximum","htmlDesc":"Maximum authorized lines in a file","type":"INTEGER","defaultValue":"1000"}]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[{"key":"maximum","value":"1000"}]}]},{"rule":{"key":"javascript:S1442","repo":"javascript","name":"\"alert(...)\" should not be used","createdAt":"2014-01-24T08:40:40+0000","severity":"MAJOR","status":"READY","internalKey":"S1442","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  alert(...) can be useful for debugging during development, but in production mode this kind of pop-up should never be displayed.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(unexpectedCondition)\n{\n  alert(\"Unexpected Condition\");\n}\n</pre>","debtOverloaded":false,"params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:S1145","repo":"javascript","name":"\"if\" statement conditions should not unconditionally evaluate to \"true\" or to \"false\"","createdAt":"2014-01-24T08:40:40+0000","severity":"MAJOR","status":"READY","internalKey":"S1145","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  <code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. This can be useful during debugging, but should not be checked in. <code>if</code> statements with conditions that are always true are completely redundant, and make the code less readable.\n</p>\n<p>\n  In either case, non-conditional <code>if</code> statements should be removed.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (true) {\n  doSomething();\n}\n...\nif (false) {\n  doSomethingElse();\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ndoSomething();\n</pre>","debtOverloaded":false,"params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:S1301","repo":"javascript","name":"\"switch\" statements should have at least 3 cases","createdAt":"2014-01-24T08:40:40+0000","severity":"MINOR","status":"READY","internalKey":"S1301","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  <code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.\n  For just one or two cases however, the code will be more readable with <code>if</code> statements.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (variable) {\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (variable == 0) {\n  doSomething();\n} else {\n  doSomethingElse();\n}\n</pre>","debtOverloaded":false,"params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"javascript:S138","repo":"javascript","name":"Functions should not have too many lines","createdAt":"2014-01-24T08:40:40+0000","severity":"MAJOR","status":"READY","internalKey":"S138","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  A function that grows too large tends to aggregate too many responsibilities.</br>\n  Such functions inevitably become harder to understand and therefore harder to maintain.\n</p>\n<p>\n  Above a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.\n</p>\n<p>\n  Those smaller functions will not only be easier to understand, but also probably easier to test.\n</p>\n\n<h2>Exceptions</h2>\n<p>\n  This function ignores Immediately Invoked Function Expressions (IIFE), functions which are created and invoked without ever being assigned a name.\n</p>\n<pre>\n (function () { // Ignored by this rule\n\n  function open() {  // Classic function declaration; not ignored\n    // ...\n  }\n\n  function read() {\n    // ...\n  }\n\n  function readlines() {\n    // ...\n  }\n})();\n</pre>","debtOverloaded":false,"params":[{"key":"max","htmlDesc":"Maximum authorized lines in a function","type":"INTEGER","defaultValue":"100"}]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[{"key":"max","value":"100"}]}]},{"rule":{"key":"javascript:ConditionalComment","repo":"javascript","name":"Internet Explorer's conditional comments should not be used","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"ConditionalComment","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  Internet Explorer offers a way to change the JavaScript code at runtime using conditional comments (activated by a @cc_on statement found in a comment). Using this preprocessing feature decreases readability and maintainability, and can hinder automated tools. What's more, it is specific to Internet Explorer and won't work for other browsers.\n</p>\n\n</p>\n  Most of the time, using those conditional comments can be easily avoided with some refactoring - using modern cross-browsers JavaScript frameworks and libraries.\n  The following code snippet illustrates the use of conditional comments:\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n/*@cc_on\n  @if (@_jscript_version >= 5.5)\n    document.write(\"You are using IE5.5 or newer\");\n  @else\n    document.write(\"You are using IE5 or older\");\n  @end\n  @*/\n</pre>","defaultDebtChar":"PORTABILITY","defaultDebtSubChar":"SOFTWARE_RELATED_PORTABILITY","debtChar":"PORTABILITY","debtSubChar":"SOFTWARE_RELATED_PORTABILITY","debtCharName":"Portability","debtSubCharName":"Software","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"1h","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"1h","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:TrailingComment","repo":"javascript","name":"Avoid trailing comment","createdAt":"2013-06-19T07:34:52+0000","severity":"MINOR","status":"READY","internalKey":"TrailingComment","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\nThis rule verifies that single-line comments are not located at the end of a line of code.\nThe main idea behind this rule is that in order to be really readable,\ntrailing comments would have to be property written and formatted (correct alignment,\nno interference with the visual structure of the code, not too long to be visible) but most often,\nautomatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.\n</p>\n\n<p>\nHowever, this rule allows to write trailing \"metadata comments\" - for which the pattern is configurable,\nas those metadata comments are usually very short and heavily used in some cases.\n</p>\n\n<pre>\n// The following line is non-compliant\nvar a1 = b + c; // This is a trailing comment that can be very very long\n\n// This very long comment is better placed before the line of code\nvar a2 = b + c;\n\n// The following line if compliant with the default configuration of the rule\nvar a3 = \"id\"; // $NON-NLS-1$\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"1min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"1min","params":[{"key":"legalCommentPattern","htmlDesc":"Pattern for text of trailing comments that are allowed.","type":"STRING","defaultValue":"^//\\s*+[^\\s]++$"}]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MINOR","params":[{"key":"legalCommentPattern","value":"^//\\s*+[^\\s]++$"}]}]},{"rule":{"key":"javascript:RedeclaredFunction","repo":"javascript","name":"Functions should not be redeclared","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"RedeclaredFunction","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  This rule checks that functions declared in same scope don't have identical names. Indeed, it is possible to declare 2 functions with the same name, but only the last definition will be kept by the JavaScript engine before starting execution of the code.\n</p>\n\n<p>\n  This use of duplicate function name is often unwanted and can lead to bugs and more generally to confusing code.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfun(); // prints \"bar\"\n\n// first declaration of the function\nfunction fun() {\n  print(\"foo\");\n}\n\nfun(); // prints \"bar\"\n\n// redeclaration of the \"fun\" function: this definition overrides the previous one\nfunction fun() {\n  print(\"bar\");\n}\n\nfun(); // prints \"bar\"\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfun(); // prints \"foo\"\n\nfunction fun() {\n  print(\"foo\");\n}\n\nfun(); // prints \"foo\"\n</pre>\n\n<p>\n    or\n</p>\n\n<pre>\nfun(); // prints \"foo\"\n\nfunction fun() {\n  print(\"foo\");\n}\n\nfun(); // prints \"foo\"\n\nfunction printBar() {\n  print(\"bar\");\n}\n\nfun(); // prints \"foo\"\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"30min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"30min","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:TabCharacter","repo":"javascript","name":"Avoid use of tabulation character","createdAt":"2013-06-19T07:34:52+0000","severity":"MINOR","status":"READY","internalKey":"TabCharacter","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\nDevelopers should not need to configure the tab width of their text editors in order to be able to read source code. So the use of tabulation character must be banned.\n</p>","debtOverloaded":false,"params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MINOR","params":[]}]},{"rule":{"key":"javascript:ExcessiveParameterList","repo":"javascript","name":"Avoid function with too many parameters","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"ExcessiveParameterList","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\nLong parameter lists can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many things.\n</p>","defaultDebtChar":"TESTABILITY","defaultDebtSubChar":"UNIT_TESTABILITY","debtChar":"TESTABILITY","debtSubChar":"UNIT_TESTABILITY","debtCharName":"Testability","debtSubCharName":"Unit level","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"1h","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"1h","params":[{"key":"maximumFunctionParameters","htmlDesc":"The maximum authorized number of parameters","type":"INTEGER","defaultValue":"7"}]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[{"key":"maximumFunctionParameters","value":"7"}]}]},{"rule":{"key":"javascript:OctalNumber","repo":"javascript","name":"Do not use octal numbers","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"OctalNumber","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\nOctal numbers should be avoided because the syntax to declare them (prefix by zero) makes it ambiguous for novice JavaScript developers to understand the real value of the number.\nFor instance, the octal \"0644\" number actually equals to 420, not 644.\n</p>\n\n<p>\nWhat's more, even if all browsers support it, this syntax is not part of ECMAScript and will generate an error in JavaScript strict mode code.\n</p>\n\n<p>\nThe following code snippet illustrates this rule :\n</p>\n\n<pre>\nvar i = 0644; // Non-Compliant\nvar j = 420; // Compliant\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"DATA_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"DATA_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Data","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"10min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"10min","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"javascript:TrailingWhitespace","repo":"javascript","name":"Avoid trailing whitespaces","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"TrailingWhitespace","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\nTrailing whitespaces are simply useless and should not stay in code. In JavaScript, they can even be source of nasty bugs with multi-line strings.\n</p>\n\n<p>\nIf you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the opportunity to do so.\n</p>\n\n<pre>\n// The following string will error if there is a whitespace after '\\'\nvar str = \"Hello \\\nWorld\";\n</pre>","debtOverloaded":false,"params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:CollapsibleIfStatements","repo":"javascript","name":"Collapsible \"if\" statements should be merged","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"CollapsibleIfStatements","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  Merging collapsible <code>if</code> statements increases the code's readability.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (file != null) {\n  if (file.isFile() || file.isDirectory()) {\n    ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (file != null && isFileOrDirectory(file)) {\n  /* ... */\n}\n\nprivate static boolean isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"30min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"30min","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:RedeclaredVariable","repo":"javascript","name":"Variables should not be redeclared","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"RedeclaredVariable","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  This rule checks that the var keyword is not used to declare a variable with a name that is already in use. It applies to already defined variables as well as to function parameters.\n</p>\n\n<p>\n  This use of duplicate name is often unwanted and can lead to bugs and more generally to confusing code :\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar a = 'foo';\nvar a = 'bar'; // Non-Compliant\n\nfunction f(e) {\n  var e = \"event\"; // Non-Compliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar a = 'foo';\nvar b = 'bar';\n\nfunction f(e) {\n  var g = \"event\";\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"10min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"10min","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:StrictMode","repo":"javascript","name":"\"strict\" mode should be used with caution","createdAt":"2013-06-19T07:34:52+0000","severity":"INFO","status":"READY","internalKey":"StrictMode","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  Even thought it may be a good practice to enforce JavaScript strict mode, doing so could result in unexpected behaviors on browsers that do not support it yet. Using this feature should therefore be done with caution and with full knowledge of the potential consequences on browsers that do not support it.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfunction strict() {\n  'use strict';\n}\n</pre>","defaultDebtChar":"PORTABILITY","defaultDebtSubChar":"SOFTWARE_RELATED_PORTABILITY","debtChar":"PORTABILITY","debtSubChar":"SOFTWARE_RELATED_PORTABILITY","debtCharName":"Portability","debtSubCharName":"Software","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"20min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"20min","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"INFO","params":[]}]},{"rule":{"key":"javascript:DuplicateFunctionArgument","repo":"javascript","name":"Function argument names should be unique","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"DuplicateFunctionArgument","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  Function arguments should all have different names to prevent any ambiguity. Indeed, if arguments have the same name, the last duplicated argument hides all the previous arguments with the same name (those previous arguments remain available through arguments[i], so they're not completely inaccessible).\n</p>\n\n<p>\n  This hiding makes no sense, clearly reduces understandability and maintainability, and obviously can be error prone. Furthermore, in JavaScript strict mode, declaring arguments with the same name produces an error.\n  The following code snippet illustrates this rule :\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction compute(a, a, c) { // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction computeBis(a, b, c) { // Compliant\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"30min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"30min","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"javascript:DuplicatePropertyName","repo":"javascript","name":"Property names should not be duplicated within an object literal","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"DuplicatePropertyName","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  JavaScript allows duplicate property names in object literals, but only the last instance of a duplicated property determines the actual value that will be used for it. Therefore, changing values of other occurrences of a duplicated property will have no effect and may cause misunderstandings and bugs.\n</p>\n\n<p>\n  What's more, using duplicate property names will generate an error in JavaScript strict mode code.\n  The following code snippet illustrates this rule :\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar data = {\n  \"key\": \"value\",\n  \"1\": \"value\",\n  \"key\": \"value\", // Noncompliant - duplicate of \"key\"\n  'key': \"value\", // Noncompliant - duplicate of \"key\"\n  key: \"value\", // Noncompliant - duplicate of \"key\"\n  \\u006bey: \"value\", // Noncompliant - duplicate of \"key\"\n  \"\\u006bey\": \"value\", // Noncompliant - duplicate of \"key\"\n  \"\\x6bey\": \"value\", // Noncompliant - duplicate of \"key\"\n  1: \"value\" // Noncompliant - duplicate of \"1\"\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar data = {\n  \"key\": \"value\",\n  \"1\": \"value\",\n  \"key2\": \"value\",\n  'key3': \"value\",\n  key4: \"value\",\n  \\u006bey5: \"value\",\n  \"\\u006bey6\": \"value\",\n  \"\\x6bey7\": \"value\",\n  1b: \"value\"\n}\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"DATA_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"DATA_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Data","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"1h","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"1h","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"javascript:FutureReservedWords","repo":"javascript","name":"\"future reserved words\" should not be used as identifiers","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"FutureReservedWords","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  The following words may be used as keywords in future evolutions of the language, so using them as identifiers should be avoided to allow an easier adoption of those potential future versions:\n<ul>\n  <li>implements</li>\n  <li>private</li>\n  <li>public</li>\n  <li>interface</li>\n  <li>package</li>\n  <li>protected</li>\n  <li>static</li>\n</ul>\n  Use of these words as identifiers would produce an error in JavaScript strict mode code.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar package = document.getElementsByName(\"foo\"); // Noncompliant\nvar someData = { package: true };                // Compliant, as it is not used as an identifier here\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar elements = document.getElementsByName(\"foo\"); // Compliant\n</pre>","defaultDebtChar":"PORTABILITY","defaultDebtSubChar":"LANGUAGE_RELATED_PORTABILITY","debtChar":"PORTABILITY","debtSubChar":"LANGUAGE_RELATED_PORTABILITY","debtCharName":"Portability","debtSubCharName":"Language","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"10min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"10min","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"javascript:ConstructorFunctionsForSideEffects","repo":"javascript","name":"Constructor functions should not be called purely for side-effects","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"ConstructorFunctionsForSideEffects","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  Some people like to call a constructor functions without assigning the result to a variable. There is no advantage in this approach since the object the new operator creates isn't used anywhere. Therefore this misleading syntax should be avoided.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nnew MyConstructor(); // Non-Compliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar something = new MyConstructor();  // Compliant\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"10min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"10min","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:BoundOrAssignedEvalOrArguments","repo":"javascript","name":"\"eval\" and \"arguments\" should not be bound or assigned","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","internalKey":"BoundOrAssignedEvalOrArguments","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  In JavaScript, <cod>eval</cod> is used to add or remove bindings and to change binding values. <code>arguments</code> is used to access function arguments through indexed properties. As a consequence, those two names, <code>eval</code> and <code>arguments</code>, should not be bound or assigned because doing so would overwrite the original definition of those two elements.\n</p>\n\n<p>\n  What's more, using either of those two names to assign or bind will generate an error in JavaScript strict mode code.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\neval = 17; // Noncompliant\narguments++; // Noncompliant\n++eval; // Noncompliant\nvar obj = { set p(arguments) { } }; // Noncompliant\nvar eval; // Noncompliant\ntry { } catch (arguments) { } // Noncompliant\nfunction x(eval) { } // Noncompliant\nfunction arguments() { } // Noncompliant\nvar y = function eval() { }; // Noncompliant\nvar f = new Function(\"arguments\", \"return 17;\"); // Noncompliant\n\nfunction fun() {\n  if (arguments.length == 0) { // Compliant\n    // do something\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nresult = 17;\nargs++;\n++result;\nvar obj = { set p(arg) { } };\nvar result;\ntry { } catch (args) { }\nfunction x(arg) { }\nfunction args() { }\nvar y = function fun() { };\nvar f = new Function(\"args\", \"return 17;\");\n\nfunction fun() {\n  if (arguments.length == 0) {\n    // do something\n  }\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"10min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"10min","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"CRITICAL","params":[]}]},{"rule":{"key":"javascript:EmptyBlock","repo":"javascript","name":"Nested blocks of code should not be left empty","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"EmptyBlock","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (var i = 0; i < length; i++) {}  // Empty on purpose or missing piece of code ?\n</pre>\n\n<h2>Exceptions</h2>\n<p>\n  When a block contains a comment, this block is not considered to be empty.\n</p>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"30min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"30min","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:SameNameForFunctionAndVariable","repo":"javascript","name":"The same name should not be used to declaration both a function and a variable in the same scope","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"SameNameForFunctionAndVariable","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  Giving both a variable and a function with the same name in a single scope should be avoided. This usage is confusing and should be avoided because it will be unclear whether the named variable refers to the function or to something else.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar fun;\nfunction fun() {\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar fun = function fun() {\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"1h","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"1h","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:NamedFunctionExpression","repo":"javascript","name":"Named function expressions should not be used","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"NamedFunctionExpression","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  While named function expressions might be useful for debugging purposes, some browsers do not support them correctly (for example Internet Explorer 8).\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nf = function fun(){}; // Non-Compliant;  named function expression\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfun = function(){}; // Compliant; function expression\n</pre>\n\n<h2>Exceptions</h2>\n<p>ECMAScript 6 generator functions are excluded from this rule.</p>\n<pre>\nfunction* f() {} // Compliant; generator function.\n</pre>","defaultDebtChar":"PORTABILITY","defaultDebtSubChar":"SOFTWARE_RELATED_PORTABILITY","debtChar":"PORTABILITY","debtSubChar":"SOFTWARE_RELATED_PORTABILITY","debtCharName":"Portability","debtSubCharName":"Software","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"20min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"20min","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:UnusedVariable","repo":"javascript","name":"Unused local variables should be removed","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"UnusedVariable","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will not wonder what the variable is used for.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction numberOfMinutes(hours) {\n  var seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction numberOfMinutes(hours) {\n  return hours * 60;\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"20min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"20min","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:TooManyBreakOrContinueInLoop","repo":"javascript","name":"Loops should not contain more than a single \"break\" or \"continue\" statement","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"TooManyBreakOrContinueInLoop","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.\n</p>\n\n<p>\n  One <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one, the code should be refactored to increase readability.\n</p>\n\n<h2>Noncompiant Code Example</h2>\n<pre>\nfor (var i = 1; i <= 10; i++) {  // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  alert(\"i = \" + i);\n}\n</pre>","defaultDebtChar":"TESTABILITY","defaultDebtSubChar":"UNIT_TESTABILITY","debtChar":"TESTABILITY","debtSubChar":"UNIT_TESTABILITY","debtCharName":"Testability","debtSubCharName":"Unit level","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"30min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"30min","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:UnusedFunctionArgument","repo":"javascript","name":"Unused function parameters should be removed","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"UnusedFunctionArgument","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  Unused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction doSomething(a, b) { // \"a\" is unused\n  return compute(b);\n}\n</pre>\n\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething(b) {\n  return compute(b);\n}\n</pre>\n\n\n\n<h2>Exceptions</h2>\n<p>\n  When writing some function callbacks some arguments might be not re-used whereas they must be part of the function signature.</br>\n  For instance JQuery has the 'each' helper to iterate over arrays or objects but using the counter 'i' should remain optional:\n</p>\n<pre>\n$([\"first\", \"last\"]).each(function (i, value) {\n  computeSomethingWithValue(value);\n});\n</pre>\n<p>\n  So the rule is the following one for function-expression: only unused arguments located after some used arguments and not followed by any other used arguments should be reported as unused. Indeed, in such case it's possible to remove them from the function signature so if there are useless they must be dropped.\n</p>\n<p>\n  Examples :\n</p>\n<pre>\nvar myFirsCallBackFunction = function (p1, p2, p3, p4) {  //unused p2 is not reported but p4 is\n                                              return p1 + p3; }\n\nvar mySecondCallBackFunction = function (p1, p2, p3, p4) {  //unused p1, p2 and p3 are not reported\n                                              return p4; }\n\nvar myThirdCallBackFunction = function (p1, p2, p3, p4) {  //unused p1 is not reported but p3 and p4 are\n                                              return p2; }\n</pre>\n<p>\nMoreover when using the 'arguments' in a function body, no parameter is reported as unused.\n</p>\n<pre>\nfunction doSomething(a, b, c) {\n  compute(arguments);\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"20min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"20min","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:VariableDeclarationAfterUsage","repo":"javascript","name":"Declare variables before usage","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"VariableDeclarationAfterUsage","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\nOne of the sources of most confusion for JavaScript beginners is scoping.\nThe reason scoping is so confusing in JavaScript is because it looks like a C-family language but doesn't behave the same way.\nIndeed C, and the rest of the C family, has block-level scope.\nWhen control enters a block, such as a if statement, new variables can be declared within that scope, without affecting the outer scope.\nThis is not the case in JavaScript.\n</p>\n\n<p>\nThe following code snippet illustrates this rule :\n</p>\n<pre>\nvar x = 1;\n\nfunction fun(){\n  print(x); // Noncompliant as x is declared later in the same scope\n  if(something) {\n    var x = 42; // Declaration\n  }\n}\n\nfun(); // Unexpectedly Print \"undefined\" and not \"1\"\n</pre>\n\n<p>\nWhereas the following code snippet is correct :\n</p>\n<pre>\nvar x = 1;\n\nfunction fun() {\n  print(x);\n  if (something) {\n    x = 42;\n  }\n}\n\nfun(); // Print \"1\"\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"20min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"20min","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:FunctionDefinitionInsideLoop","repo":"javascript","name":"Functions should not be defined inside loops","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"FunctionDefinitionInsideLoop","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  Defining a function inside of a loops can yield unexpected results because under the covers, only a single instance of the function is defined. Rather than creating new function instances, the loop iterations simply update the function's variables. Instead, the function should be returned.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar funs = [];\nfor (var i = 0; i < 13; i++) {\n  funs[i] = function() { // Non-Compliant\n    return i;\n  };\n}\nprint(funs[0]()); // 13 instead of 0\nprint(funs[1]()); // 13 instead of 1\nprint(funs[2]()); // 13 instead of 2\nprint(funs[3]()); // 13 instead of 3\n...\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"20min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"20min","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:TrailingComma","repo":"javascript","name":"Trailing commas should not be used","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"TrailingComma","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  Most browsers parse and discard a meaningless, trailing comma. Unfortunately, that's not the case for Internet Explorer, which in most versions throws a meaningless error. Therefore trailing commas should be eliminated.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvar settings = {\n    'foo'  : oof,\n    'bar' : rab,    // Noncompliant - trailing comma\n};\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar settings = {\n    'foo'  : oof,\n    'bar' : rab\n};\n</pre>","defaultDebtChar":"PORTABILITY","defaultDebtSubChar":"COMPILER_RELATED_PORTABILITY","debtChar":"PORTABILITY","debtSubChar":"COMPILER_RELATED_PORTABILITY","debtCharName":"Portability","debtSubCharName":"Compiler","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"10min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"10min","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"BLOCKER","params":[]}]},{"rule":{"key":"javascript:Eval","repo":"javascript","name":"\"eval\" should not be used","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"Eval","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  The <code>eval</code> function is a way to run arbitrary code at run-time. Generally it is considered to be very dangerous because it allows execution of arbitrary code. Its use thus is discouraged. If you have carefully verified that there is no other option than to use this construct, pay special attention not to pass any user-provided data into it without properly validating it beforehand.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\neval(code_to_be_dynamically_executed)\n</pre>","defaultDebtChar":"SECURITY","defaultDebtSubChar":"INPUT_VALIDATION_AND_REPRESENTATION","debtChar":"SECURITY","debtSubChar":"INPUT_VALIDATION_AND_REPRESENTATION","debtCharName":"Security","debtSubCharName":"Input validation and representation","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"1h","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"1h","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:EqEqEq","repo":"javascript","name":"\"===\" and \"!==\" should be used instead of \"==\" and \"!=\"","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"EqEqEq","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\nThe <code>==</code> and <code>!=</code> operators do type coercion before comparing values.\nThis is bad because it can mask type errors. For example, it evaluates <code>' \\t\\r\\n' == 0</code> as true.\nIt is best to always use the side-effect-less <code>===</code> and <code>!===</code> operators instead.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (var == 'howdy') {...} // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (var === 'howdy') {...}\n</pre>\n\n<h2>Exceptions</h2>\n<p>\n  Even if testing the equality of a variable against null doesn't do exactly what most JavaScript developers believe, usage of <code>==</code> or <code>!=</code> is tolerated in such context.\n  In the following case, if <code>foo</code> hasn't been initialized, its default value is not <code>null</code> but <code>undefined</code>. Nevertheless <code>undefined == null</code>, so JavaScript developers get the expected behavior.\n</p>\n<pre>\nif(foo == null) {...}\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"30min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"30min","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:FunctionComplexity","repo":"javascript","name":"Avoid too complex function","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"FunctionComplexity","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\nThe cyclomatic complexity of a function should not exceed a defined threshold.\nComplex code can perform poorly and will in any case be difficult to understand and therefore to maintain.\n</p>","defaultDebtChar":"TESTABILITY","defaultDebtSubChar":"UNIT_TESTABILITY","debtChar":"TESTABILITY","debtSubChar":"UNIT_TESTABILITY","debtCharName":"Testability","debtSubCharName":"Unit level","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"1h","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"1h","params":[{"key":"maximumFunctionComplexityThreshold","htmlDesc":"The maximum authorized complexity in function","type":"INTEGER","defaultValue":"10"}]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[{"key":"maximumFunctionComplexityThreshold","value":"10"}]}]},{"rule":{"key":"javascript:CurlyBraces","repo":"javascript","name":"Always use curly braces for \"if/else/for/while/do\" statements","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"CurlyBraces","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\nNot using curly braces could be error-prone in some cases.\nFor instance in the following example, the two statements seems to be attached to the if statement whereas this is the case only for the first one :\n</p>\n\n<pre>\nif (condition) // Non-Compliant\n  executeSomething();\n  checkSomething();\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"10min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"10min","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:Semicolon","repo":"javascript","name":"Each statement should end with a semicolon","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"Semicolon","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  In JavaScript, the semicolon (';') is optional as a statement separator, but omitting semicolons can be confusing, and lead to unexpected results because a semicolon is implicitly inserted at the end of each line.\n</p>\n\n\n<h2>Noncompliant Code Example</h2>\n<p>\n  Here is an example of such confusing code:\n</p>\n<pre>\nfunction fun() {\n  return  // Noncompliant. ';' implicitly inserted at end of line\n       5  // Noncompliant. ';' implicitly inserted at end of line\n}\nprint(fun());  // prints \"undefined\", not \"5\"\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction fun() {\n  return 5;\n}\nprint(fun());\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"10min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"10min","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:UnreachableCode","repo":"javascript","name":"Unreachable code","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"UnreachableCode","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\nreturn, break, continue, or throw statements should be followed by a } or case or default.\n</p>\n\n<p>\nThe following code snippet illustrates this rule :\n</p>\n\n<pre>\nfunction sayHello() {\n  if (true) {\n    return;\n    var b; // Non-Compliant - this will never be executed\n  } else {\n    var c;\n  }\n\n  while (true) {\n    break;\n    var d; // Non-Compliant - this will never be executed\n  }\n}\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"30min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"30min","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:NonEmptyCaseWithoutBreak","repo":"javascript","name":"An unconditional \"break\" statement shall terminate every non-empty switch-clause","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"NonEmptyCaseWithoutBreak","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\nWhen the last statement of a switch-clause is not a break statement, the control flow \"falls\" into the next switch-clause.\nWhilst this is sometimes intentional, it is often a mistake which could lead to some unexpected behaviors.\n\nThis rule doesn't apply to empty switch-clauses. Indeed those empty switch-clauses allow to specify the same behavior to a group of cases.\n</p>\n\n<p>\nThe following code snippet illustrates this rule:\n</p>\n\n<pre>\nswitch (param) {\n  case 0: // Compliant\n  case 1: // Compliant\n    break;\n  case 2: // Compliant\n    return;\n  case 3: // Compliant\n    throw new Error();\n  case 4: // Non-Compliant\n    doSomething();\n  default: // Compliant\n    doSomethingElse();\n}\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"30min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"30min","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:ForIn","repo":"javascript","name":"\"for...in\" loops should filter properties before acting on them","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"ForIn","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  The <code>for...in</code> in statement allows you to loop through the names of all of the properties of an object. Unfortunately, the list of properties includes all those properties that were inherited through the prototype chain. This has the bad side effect of serving up method functions when the interest is in data properties. Programs that don't take this into account can fail.\n</p>\n\n<p>\n  Therefore, the body of every <code>for...in</code> statement should be wrapped in an if statement that filters which properties are acted upon. It can select for a particular type or range of values, or it can exclude functions, or it can exclude properties from the prototype.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (name in object) {\n    doSomething(name);  // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfor (name in object) {\n  if (object.hasOwnProperty(name)) {\n    doSomething(name);\n  }\n}\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"30min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"30min","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:SwitchWithoutDefault","repo":"javascript","name":"The final clause of a \"switch\" statement shall be the default-clause","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"SwitchWithoutDefault","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\nThe requirement for a final default clause is defensive programming.\nThis clause should either take appropriate action or contain a suitable comment as to why no action is taken.\n</p>\n\n<p>\nThe following code snippet illustrates this rule:\n</p>\n\n<pre>\nswitch (param) { // Non-Compliant - default clause is missing\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\nswitch (param) {\n  default: // Non-Compliant - default clause should be the last one\n    doSomething();\n    break;\n  case 0:\n    doSomethingElse();\n    break;\n}\n\nswitch (param) {\n  case 0:\n    doSomethingElse();\n    break;\n  default: // Compliant\n    doSomethingElse();\n    break;\n}\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"1h","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"1h","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:HtmlComments","repo":"javascript","name":"HTML-style comments should not be used","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"HtmlComments","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  HTML-style comments are not part of EcmaScript specification, and should not be used.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;!-- Noncompliant -->\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n// Compliant\n/* Compliant */\n</pre>","defaultDebtChar":"PORTABILITY","defaultDebtSubChar":"LANGUAGE_RELATED_PORTABILITY","debtChar":"PORTABILITY","debtSubChar":"LANGUAGE_RELATED_PORTABILITY","debtCharName":"Portability","debtSubCharName":"Language","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"5min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"5min","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:NestedIfDepth","repo":"javascript","name":"Control flow statements \"if\", \"for\", \"while\", \"switch\" and \"try\" should not be nested too deeply","createdAt":"2013-06-19T07:34:52+0000","severity":"MINOR","status":"READY","internalKey":"NestedIfDepth","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code> and <code>try</code> statements is a key ingredient for making what's known as \"Spaghetti code\".\n  Such code is hard to read, refactor and therefore maintain.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>\n  The following code snippet illustrates this rule with the default threshold of 3.\n</p>\n\n<pre>\n  if (condition1) {                  // Compliant - depth = 1\n    /* ... */\n    if (condition2) {                // Compliant - depth = 2\n      /* ... */\n      for(int i = 0; i < 10; i++) {  // Compliant - depth = 3, not exceeding the limit\n        /* ... */\n        if (condition4) {            // Non-Compliant - depth = 4\n          if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n            /* ... */\n          }\n          return;\n        }\n      }\n    }\n  }\n</pre>","defaultDebtChar":"CHANGEABILITY","defaultDebtSubChar":"LOGIC_CHANGEABILITY","debtChar":"CHANGEABILITY","debtSubChar":"LOGIC_CHANGEABILITY","debtCharName":"Changeability","debtSubCharName":"Logic","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"1h","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"1h","params":[{"key":"maximumNestingLevel","htmlDesc":"Maximum allowed &quot;if/for/while/switch/try&quot; statements nesting depth","type":"INTEGER","defaultValue":"3"}]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MINOR","params":[{"key":"maximumNestingLevel","value":"3"}]}]},{"rule":{"key":"javascript:FunctionDeclarationsWithinBlocks","repo":"javascript","name":"Function declarations should not be made within blocks","createdAt":"2013-06-19T07:34:52+0000","severity":"BLOCKER","status":"READY","internalKey":"FunctionDeclarationsWithinBlocks","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  While most script engines support function declarations within blocks, it is not part of ECMAScript 5 and below, and from browser to browser the implementations are inconsistent with each other. ECMAScript 5 and below only allows function declarations in the root statement list of a script or function. If you are targeting browsers that don't support ECMAScript 6, use a variable initialized with a function expression to define a function within a block :\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x) {\n  function foo() {}\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (x) {\n  var foo = function() {}\n}\n</pre>","defaultDebtChar":"PORTABILITY","defaultDebtSubChar":"COMPILER_RELATED_PORTABILITY","debtChar":"PORTABILITY","debtSubChar":"COMPILER_RELATED_PORTABILITY","debtCharName":"Portability","debtSubCharName":"Compiler","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"1h","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"1h","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:OneStatementPerLine","repo":"javascript","name":"Do not use more that one statement per line","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"OneStatementPerLine","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\nFor better readability, do not put more than one statement on a single line.\n</p>\n\n<p>\nThe following code snippet illustrates this rule :\n</p>\n\n<pre>\nvar foo = \"something\"; var bar = \"somethingElse\";     // Non-Compliant - there are two statements\n</pre>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"READABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"READABILITY","debtCharName":"Maintainability","debtSubCharName":"Readability","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"10min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"10min","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:CommentedCode","repo":"javascript","name":"Sections of code should not be \"commented out\"","createdAt":"2013-06-19T07:34:52+0000","severity":"BLOCKER","status":"READY","internalKey":"CommentedCode","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\nProgrammers should not comment out code as it bloats programs and reduces readability.\nUnused code should be deleted and can be retrieved from source control history if required.\n</p>","defaultDebtChar":"MAINTAINABILITY","defaultDebtSubChar":"UNDERSTANDABILITY","debtChar":"MAINTAINABILITY","debtSubChar":"UNDERSTANDABILITY","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"30min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"30min","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:PrimitiveWrappers","repo":"javascript","name":"Wrapper objects should not be used for primitive types","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"PrimitiveWrappers","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  The use of wrapper objects for primitive types is gratuitous, confusing and dangerous. Simple literals should be used instead.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x = new Boolean(false);\nif (x) {\n  alert('hi');  // Shows 'hi'.\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar x = false;\nif (x) {\n  alert('hi');\n}\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"10min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"10min","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:MultilineStringLiterals","repo":"javascript","name":"Multiline string literals should not be used","createdAt":"2013-06-19T07:34:52+0000","severity":"BLOCKER","status":"READY","internalKey":"MultilineStringLiterals","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  Continuing a string across a linebreak is supported in most script engines, but it is not a part of ECMAScript. Additionally, the whitespace at the beginning of each line can't be safely stripped at compile time, and the whitespace after the slash will result in tricky errors.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar myString = 'A rather long string of English text, an error message \\\n                actually that just keeps going and going -- an error \\\n                message to make the Energizer bunny blush (right through \\\n                those Schwarzenegger shades)! Where was I? Oh yes, \\\n                you\\'ve got an error and all the extraneous whitespace is \\\n                just gravy.  Have a nice day.';  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar myString = 'A rather long string of English text, an error message ' +\n    'actually that just keeps going and going -- an error ' +\n    'message to make the Energizer bunny blush (right through ' +\n    'those Schwarzenegger shades)! Where was I? Oh yes, ' +\n    'you\\'ve got an error and all the extraneous whitespace is ' +\n    'just gravy.  Have a nice day.';\n</pre>","defaultDebtChar":"PORTABILITY","defaultDebtSubChar":"COMPILER_RELATED_PORTABILITY","debtChar":"PORTABILITY","debtSubChar":"COMPILER_RELATED_PORTABILITY","debtCharName":"Portability","debtSubCharName":"Compiler","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"10min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"10min","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:DebuggerStatement","repo":"javascript","name":"Debugger statements should not be used","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"DebuggerStatement","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  The debugger statement can be placed anywhere in procedures to suspend execution. Using the debugger statement is similar to setting a breakpoint in the code. By definition such statement must absolutely be removed from the source code to prevent any unexpected behavior or added vulnerability to attacks in production.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (i = 1; i<5; i++) {\n  // Print i to the Output window.\n  Debug.write(\"loop index is \" + i);\n  // Wait for user to resume.\n  debugger;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfor (i = 1; i<5; i++) {\n  // Print i to the Output window.\n  Debug.write(\"loop index is \" + i);\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n  <li><a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code</li>\n  <li><a href=\"http://cwe.mitre.org/data/definitions/485.html\">MITRE, CWE-485</a> - Insufficient Encapsulation</li>\n</ul>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"20min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"20min","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:AssignmentWithinCondition","repo":"javascript","name":"Assignments should not be made from within sub-expressions","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"AssignmentWithinCondition","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  Assignments within sub-expressions are hard to spot and therefore make the code less readable.</br>\n  It is also a common mistake to write <code>=</code> when <code>==</code> was meant.</br>\n  Ideally, expressions should not have side-effects.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\ndoSomething(i = 42);\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ni = 42;\ndoSomething(i);\n</pre>\n\n<p>or</p>\n\n<pre>\ni = 42;\ndoSomething(i);\n</pre>\n\n<h2>Exceptions</h2>\n<p>Assignments enclosed in relational expressions are allowed.</p>\n<pre>\nwhile ((line = nextLine()) != null) { }\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"10min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"10min","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:BitwiseOperators","repo":"javascript","name":"Bitwise operators should not be used","createdAt":"2013-06-19T07:34:52+0000","severity":"BLOCKER","status":"READY","internalKey":"BitwiseOperators","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n JavaScript does not have an integer type, but it does have bitwise operators <<, >>, >>>, ~, &, |. These operators convert their operands from floating point values to integers and back, so they are not as efficient as in C or other languages. Further, they are rarely useful in browser applications, and the similarity to the logical operators can mask some programming errors.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (a & b) { ... } // Noncompliant; & used in error\nvar oppositeSigns = ((x ^ y) < 0); // Noncompliant; there's a clearer way to test for this\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (a && b) { ... }\nvar oppositeSigns = false;\nif ( (x < 0 && y > 0) || (x > 0 && y < 0) ) {\n  oppositeSigns = true;\n}\n</pre>","defaultDebtChar":"EFFICIENCY","defaultDebtSubChar":"CPU_EFFICIENCY","debtChar":"EFFICIENCY","debtSubChar":"CPU_EFFICIENCY","debtCharName":"Efficiency","debtSubCharName":"Processor use","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"1h","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"1h","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:ArrayAndObjectConstructors","repo":"javascript","name":"Array and Object constructors should not be used","createdAt":"2013-06-19T07:34:52+0000","severity":"BLOCKER","status":"READY","internalKey":"ArrayAndObjectConstructors","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  Array and Object literals should always be preferred to Array and Object constructors.\n</p>\n\n<p>\n  Array constructors are error-prone due to the way their arguments are interpreted. If more than one argument is used, the array length will be equal to the number of arguments. However, using a single argument will have one of three consequences:\n</p>\n\n<ul>\n    <li>If the argument is a number and it is a natural number the length will be equal to the value of the argument.</li>\n    <li>If the argument is a number, but not a natural number an exception will be thrown.</li>\n    <li>Otherwise the array will have one element with the argument as its value.</li>\n</ul>\n\n<p>\n  For these reasons, if someone changes the code to pass 1 argument instead of 2 arguments, the array might not have the expected length. To avoid these kinds of weird cases, always use the more readable array.\n</p>\n\n<p>\n  Object constructors don't have the same problems, but for readability and consistency object literals should be used.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar a3 = new Array(x1); // Noncompliant and variable in results\nvar a4 = new Array();  // Noncompliant. Results in 0-element array.\nvar a1 = new Array(x1, x2, x3);  // Noncompliant. Results in 3-element array.\n\nvar o = new Object(); // Noncompliant\n\nvar o2 = new Object(); // Noncompliant\no2.a = 0;\no2.b = 1;\no2.c = 2;\no2['strange key'] = 3;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar a = [x1, x2, x3];\nvar a2 = [x1, x2];\nvar a3 = [x1];\nvar a4 = [];\n\nvar o = {};\n\nvar o2 = {\n  a: 0,\n  b: 1,\n  c: 2,\n  'strange key': 3\n};\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"30min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"30min","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:LabelPlacement","repo":"javascript","name":"Only \"while\", \"do\" and \"for\" statements should be labelled","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"LabelPlacement","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  Any statement or block of statement can be identified by a label, but those labels should be used only on 'while', 'do-while' and 'for' statements.\n  Using labels in any other context leads to unstructured code.\n</p>\n\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyLabel:if (i % 2 == 0) {  // Non-Compliant\n  if (i == 12) {\n    print(\"12\");\n    break myLabel;\n  }\n  print(\"Odd number, but not 12\");\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nmyLabel:for (i = 0; i < 10; i++) {   // Compliant\n  print(\"Loop\");\n  break myLabel;\n}\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"LOGIC_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"LOGIC_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Logic","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"30min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"30min","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]},{"rule":{"key":"javascript:WithStatement","repo":"javascript","name":"\"with\" statements should not be used","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","internalKey":"WithStatement","isTemplate":false,"tags":[],"sysTags":[],"lang":"js","langName":"JavaScript","htmlDesc":"<p>\n  The use of the <code>with</code> keyword produces an error in JavaScript strict mode code. However, that's not the worst that can be said against <code>with</code>.\n</p>\n<p>\n  Using <code>with</code> allows a short-hand access to an object's properties - assuming they're already set. But use <code>with</code> to access some property not already set in the object,\n  and suddenly you're catapulted out of the object scope and into the global scope, creating or overwriting variables there. Since the effects of <code>with</code> are entirely\n  dependent on the object passed to it, <code>with</code> can be dangerously unpredictable, and should never be used.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x = 'a';\n\nvar foo = {\n  y: 1\n}\n\nwith (foo) {  // Noncompliant\n  y = 4;  // updates foo.x\n  x = 3;  // does NOT add a foo.x property; updates x var in outer scope\n}\nprint(foo.x + \" \" + x); // shows: undefined 3\n</pre>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x = 'a';\n\nvar foo = {\n  y: 1\n}\n\nfoo.y = 4;\nfoo.x = 3;\n\nprint(foo.x + \" \" + x); // shows: 3 a\n</pre>","defaultDebtChar":"RELIABILITY","defaultDebtSubChar":"INSTRUCTION_RELIABILITY","debtChar":"RELIABILITY","debtSubChar":"INSTRUCTION_RELIABILITY","debtCharName":"Reliability","debtSubCharName":"Instruction","defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"30min","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"30min","params":[]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[]}]}]