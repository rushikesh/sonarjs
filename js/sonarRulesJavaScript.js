var js = [{"rule":{"name":"\"===\" and \"!==\" should be used instead of \"==\" and \"!=\"","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["bug"],"htmlDesc":"<p>The <code>==</code> and <code>!=</code> operators do type coercion before comparing values. This is bad because it can mask type errors. For example, it evaluates <code>' \\t\\r\\n' == 0</code> as <code>true</code>.</p>\n<p>It is best to always use the side-effect-less <code>===</code> and <code>!==</code> operators instead.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif (var == 'howdy') {...} // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nif (var === 'howdy') {...}\n</pre>\n<h2>Exceptions</h2>\n\n<p>Even if testing the equality of a variable against null doesn't do exactly what most JavaScript developers believe, usage of <code>==</code> or <code>!=</code> is tolerated in such context. In the following case, if <code>foo</code> hasn't been initialized, its default value is not <code>null</code> but <code>undefined</code>. Nevertheless <code>undefined == null</code>, so JavaScript developers get the expected behavior.</p>\n<pre>\nif(foo == null) {...}\n</pre>","debtCharName":"Reliability","debtSubCharName":"Instruction","debtRemFnOffset":"5min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR"}]},{"rule":{"name":"\"[type=...]\" should be used to select elements by type","createdAt":"2015-06-21T07:12:56+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["jquery","performance"],"htmlDesc":"<p>\n  While <code>:&lt;element_type&gt;</code> and <code>[type=\"&lt;element_type&gt;\"]</code> can both be used in jQuery to select elements by their type,\n  <code>[type=\"&lt;element_type&gt;\"]</code> is far faster because it can take advantage of the native DOM <code>querySelectorAll()</code> method in modern browsers.\n</p>\n\n<p>This rule raises an issue when following selectors are used:</p>\n\n<ul>\n  <li><code>:checkbox</code></li>\n  <li><code>:file</code></li>\n  <li><code>:image</code></li>\n  <li><code>:password</code></li>\n  <li><code>:radio</code></li>\n  <li><code>:reset</code></li>\n  <li><code>:text</code></li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n  var input = $( \"form input:radio\" ); // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\n  var input = $( \"form input[type=radio]\" ); // Compliant\n</pre>","debtCharName":"Efficiency","debtSubCharName":"Processor use","debtRemFnOffset":"2min"},"actives":[]},{"rule":{"name":"\"alert(...)\" should not be used","createdAt":"2014-01-24T08:40:40+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["cwe","security","user-experience"],"htmlDesc":"<p>alert(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(unexpectedCondition)\n{\n  alert(\"Unexpected Condition\");\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code</li>\n</ul>","debtCharName":"Security","debtSubCharName":"Security features","debtRemFnOffset":"10min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR"}]},{"rule":{"name":"\"arguments.caller\" and \"arguments.callee\" should not be used","createdAt":"2015-04-07T09:32:39+0000","severity":"CRITICAL","status":"READY","tags":[],"sysTags":["obsolete"],"htmlDesc":"<p>Both <code>arguments.caller</code> and <code>arguments.callee</code> make quite a few optimizations impossible so they were deprecated in latest versions of JavaScript. In fact, EcmaScript 5 forbids the use of both in <code>strict</code> mode, according to the docs:</p>\n<blockquote>Arguments objects for strict mode functions define non-configurable accessor properties named \"caller\" and \"callee\" which throw a TypeError exception on access.</blockquote>\n<p>The same restriction applies to the function's <code>caller</code> and <code>arguments</code> properties in <code>strict</code> mode.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfunction whoCalled() {\n   if (arguments.caller == null)   //Noncompliant\n      console.log('I was called from the global scope.');\n   else\n      console.log(arguments.caller + ' called me!');  // Noncompliant\n\n  console.log(whoCalled.caller);  // Noncompliant\n  console.log(whoCalled.arguments);  // Noncompliant\n}\n</pre>","debtCharName":"Reliability","debtSubCharName":"Instruction","debtRemFnOffset":"30min"},"actives":[]},{"rule":{"name":"\"continue\" should not be used","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","tags":[],"sysTags":["misra"],"htmlDesc":"<p><code>continue</code> is an unstructured control flow statement. It makes code less testable, less readable and less maintainable. Structured control flow statements such as <code>if</code> should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n  for (i = 0; i < 10; i++) {\n    if (i == 5) {\n      continue;  /* Non-Compliant */\n    }\n    alert(\"i = \" + i);\n  }\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\n  for (i = 0; i < 10; i++) {\n    if (i != 5) {  /* Compliant */\n      alert(\"i = \" + i);\n    }\n  }\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 14.5</li>\n</ul>","debtCharName":"Testability","debtSubCharName":"Unit level","debtRemFnOffset":"30min"},"actives":[]},{"rule":{"name":"\"defaults\" should be a function when objects or arrays are used","createdAt":"2015-04-07T09:32:39+0000","severity":"CRITICAL","status":"READY","tags":[],"sysTags":["backbone","bug"],"htmlDesc":"<p>\n  When using the Backbone.js framework, model <code>defaults</code> should be a function rather than an object if it contains arrays or objects. This is because objects and arrays are passed by reference in JavaScript. So a <code>defaults</code> object that contains arrays or objects is going to set the default value of every instance to point to the same shared object or array.\n</p>\n<p>\n  Use a function instead and a fresh copy of the object or array will be peeled off for each instance.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar Person = Backbone.Model.extend({\n  defaults: {  // Noncompliant; every instance of Person will share the same instance of favoriteColors\n    favoriteColors: [\"blue\",\"purple\",\"raspberry\"]\n  }\n});\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar Person = Backbone.Model.extend({\n  defaults: function() {\n    return {\n      favoriteColors: [\"blue\",\"purple\",\"raspberry\"]\n    };\n  }\n});\n</pre>","debtCharName":"Reliability","debtSubCharName":"Data","debtRemFnOffset":"5min"},"actives":[]},{"rule":{"name":"\"delete\" should not be used on arrays","createdAt":"2015-06-21T07:12:56+0000","severity":"CRITICAL","status":"READY","tags":[],"sysTags":["bug"],"htmlDesc":"<p>\n  The <code>delete</code> operator can be used to remove a property from any object. Arrays are objects, so the <code>delete</code> operator can be used here too,\n  but if it is, a hole will be left in the array because the indexes/keys won't be shifted to reflect the deletion.\n</p>\n\n<p>The proper method for removing an element at a certain index would be:</p>\n\n<ul>\n  <li><code>Array.prototype.splice</code> - add/remove elements from the the array</li>\n  <li><code>Array.prototype.pop</code> - add/remove elements from the end of the array</li>\n  <li><code>Array.prototype.shift</code> - add/remove elements from the beginning of the array</li>\n</ul>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvar myArray = ['a', 'b', 'c', 'd'];\n\ndelete myArray[2];  // Noncompliant. myArray => ['a', 'b', undefined, 'd']\nconsole.log(myArray[2]); // expected value was 'd' but output is undefined\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nvar myArray = ['a', 'b', 'c', 'd'];\n\n// removes 1 element from index 2\nremoved = myArray.splice(2, 1);  // myArray => ['a', 'b', 'd']\nconsole.log(myArray[2]); // outputs 'd'\n</pre>","debtCharName":"Reliability","debtSubCharName":"Data","debtRemFnOffset":"5min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"CRITICAL"}]},{"rule":{"name":"\"eval\" and \"arguments\" should not be bound or assigned","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","tags":[],"sysTags":["bug"],"htmlDesc":"<p>In JavaScript, <code>eval</code> is used to evaluate a string as JavaScript code, and <code>arguments</code> is used to access function arguments through indexed properties.\n  As a consequence, <code>eval</code> and <code>arguments</code> should not be bound or assigned, because doing so would overwrite the original definitions of those two reserved words. </p>\n\n<p>What's more, using either of those two names to assign or bind will generate an error in JavaScript strict mode code.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\neval = 17; // Noncompliant\narguments++; // Noncompliant\n++eval; // Noncompliant\nvar obj = { set p(arguments) { } }; // Noncompliant\nvar eval; // Noncompliant\ntry { } catch (arguments) { } // Noncompliant\nfunction x(eval) { } // Noncompliant\nfunction arguments() { } // Noncompliant\nvar y = function eval() { }; // Noncompliant\nvar f = new Function(\"arguments\", \"return 17;\"); // Noncompliant\n\nfunction fun() {\n  if (arguments.length == 0) { // Compliant\n    // do something\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nresult = 17;\nargs++;\n++result;\nvar obj = { set p(arg) { } };\nvar result;\ntry { } catch (args) { }\nfunction x(arg) { }\nfunction args() { } \nvar y = function fun() { }; \nvar f = new Function(\"args\", \"return 17;\");\n\nfunction fun() {\n  if (arguments.length == 0) {\n    // do something\n  }\n}\n</pre>","debtCharName":"Reliability","debtSubCharName":"Instruction","debtRemFnOffset":"10min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"CRITICAL"}]},{"rule":{"name":"\"find\" should be used to select the children of an element known by id","createdAt":"2015-05-20T05:01:36+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["jquery","performance","user-experience"],"htmlDesc":"<p>\n  The use of <code>find</code> allows <code>document.getElementById()</code> to be used for the top-level selection, and saves the Sizzle engine for where it's really needed.\n  That makes the query faster, and your application more responsive.\n</p>\n<p>From the jQuery documentation:</p>\n\n<blockquote>\n  Beginning your selector with an ID is always best.<br>\n  The <code>.find()</code> approach is faster because the first selection is handled without going through the Sizzle selector engine – ID-only selections are handled using <code>document.getElementById()</code>,\n  which is extremely fast because it is native to the browser.\n</blockquote>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>var $productIds = $(\"#products div.id\"); // Noncompliant - a nested query for Sizzle selector engine</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>var $productIds = $(\"#products\").find(\"div.id\"); // Compliant - #products is already selected by document.getElementById() so only div.id needs to go through Sizzle selector engine</pre>","debtCharName":"Efficiency","debtSubCharName":"Processor use","debtRemFnOffset":"5min"},"actives":[]},{"rule":{"name":"\"FIXME\" tags should be handled","createdAt":"2014-01-24T08:40:40+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":[],"htmlDesc":"<p>\n  <code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.\n</p>\n<p>\n  Sometimes the developer will not have the time or will simply forget to get back to that tag.\n  This rule is meant to track those tags, and ensure that they do not go unnoticed.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction divide(numerator, denominator) {\n  return numerator / denominator;              // FIXME denominator value might be  0\n}\n</pre>","debtCharName":"Reliability","debtSubCharName":"Instruction","debtRemFnOffset":"20min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR"}]},{"rule":{"name":"\"for\" loop incrementers should modify the variable being tested in the loop's stop condition","createdAt":"2015-04-07T09:32:39+0000","severity":"CRITICAL","status":"READY","tags":[],"sysTags":["bug"],"htmlDesc":"<p>It is almost always an error when a <code>for</code> loop's stop condition and incrementer don't act on the same variable. Even when it is not, it could confuse future maintainers of the code, and should be avoided.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (i = 0; i &lt; 10; j++) {  // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfor (i = 0; i &lt; 10; i++) {\n  // ...\n}\n</pre>","debtCharName":"Reliability","debtSubCharName":"Logic","debtRemFnOffset":"20min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"CRITICAL"}]},{"rule":{"name":"\"for...in\" loops should filter properties before acting on them","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["bug"],"htmlDesc":"<p>The <code>for...in</code> in statement allows you to loop through the names of all of the properties of an object. Unfortunately, the list of properties includes all those properties that were inherited through the prototype chain. This has the bad side effect of serving up method functions when the interest is in data properties. Programs that don't take this into account can fail.</p>\n<p>Therefore, the body of every <code>for...in</code> statement should be wrapped in an <code>if</code> statement that filters which properties are acted upon. It can select for a particular type or range of values, or it can exclude functions, or it can exclude properties from the prototype. </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfor (name in object) {\n    doSomething(name);  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nfor (name in object) {\n  if (object.hasOwnProperty(name)) {\n    doSomething(name);\n  }\n}\n</pre>","debtCharName":"Reliability","debtSubCharName":"Logic","debtRemFnOffset":"5min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR"}]},{"rule":{"name":"\"future reserved words\" should not be used as identifiers","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","tags":[],"sysTags":["lock-in","pitfall"],"htmlDesc":"<p>The following words may be used as keywords in future evolutions of the language, so using them as identifiers should be avoided to allow an easier adoption of those potential future versions:</p>\n<ul>\n<li> <code>await</code></li>\n<li> <code>class</code></li>\n<li> <code>const</code></li>\n<li> <code>enum</code></li>\n<li> <code>exports</code></li>\n<li> <code>extends</code></li>\n<li> <code>implements</code></li>\n<li> <code>import</code></li>\n<li> <code>interface</code></li>\n<li> <code>let</code></li>\n<li> <code>package</code></li>\n<li> <code>private</code></li>\n<li> <code>protected</code></li>\n<li> <code>public</code></li>\n<li> <code>static</code></li>\n<li> <code>super</code></li>\n<li> <code>yield</code></li>\n</ul>\n<p>Use of these words as identifiers would produce an error in JavaScript <code>strict</code> mode code.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvar package = document.getElementsByName(\"foo\"); // Noncompliant\nvar someData = { package: true };                 // Compliant, as it is not used as an identifier here\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nvar elements = document.getElementsByName(\"foo\"); // Compliant\n</pre>","debtCharName":"Portability","debtSubCharName":"Language","debtRemFnOffset":"5min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"CRITICAL"}]},{"rule":{"name":"\"if ... else if\" constructs shall be terminated with an \"else\" clause","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["cert","misra"],"htmlDesc":"<p>This rule applies whenever an <code>if</code> statement is followed by one or </p>\n<p>more <code>else if</code> statements, the final <code>else if</code> shall be followed by an <code>else</code> statement.</p>\n<p>The requirement for a final <code>else</code> statement is defensive programming. </p>\n<p>The <code>else</code> statement should either take appropriate action or contain </p>\n<p>a suitable comment as to why no action is taken. This is consistent with the </p>\n<p>requirement to have a final <code>default</code> clause in a <code>switch</code></p>\n<p>statement. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x == 0) {\n  doSomething();\n} else if (x == 1) {\n  doSomethingElse();\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (x == 0) {\n  doSomething();\n} else if (x == 1) {\n  doSomethingElse();\n} else {\n  throw new IllegalStateException();\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 14.10</li>\n<li> MISRA C++:2008, 6-4-2</li>\n<li> MISRA C:2012, 15.7</li>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/YgE\">CERT, MSC01-C</a> - Strive for logical completeness</li>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/JoIyAQ\">CERT, MSC01-CPP</a> - Strive for logical completeness</li>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/PQHRAw\">CERT, MSC64-Java</a> - Strive for logical completeness</li>\n</ul>","debtCharName":"Reliability","debtSubCharName":"Logic","debtRemFnOffset":"5min"},"actives":[]},{"rule":{"name":"\"indexOf\" checks should not be for positive numbers","createdAt":"2015-04-07T09:32:39+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["bug"],"htmlDesc":"<p>\n  Most checks against an <code>indexOf</code> call against a string or array compare it with -1 because 0 is a valid index. Any checks which look for values >0 ignore the first element, which is likely a bug.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar color = \"blue\";\nvar name = \"ishmael\";\nvar number = 123;\n\nvar arr = [color, name];\n\nif (arr.indexOf(\"blue\") > 0) { // Noncompliant\n  // ...\n}\nif (arr[0].indexOf(\"ish\") > 0 { // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar color = \"blue\";\nvar name = \"ishmael\";\nvar number = 123;\n\nvar arr = [color, name];\n\nif (arr.indexOf(\"blue\") >= 0) {\n  // ...\n}\nif (arr[0].indexOf(\"ish\") > -1 {\n  // ...\n}\n</pre>","debtCharName":"Reliability","debtSubCharName":"Logic","debtRemFnOffset":"2min"},"actives":[]},{"rule":{"name":"\"NaN\" should not be used in comparisons","createdAt":"2015-04-07T09:32:39+0000","severity":"BLOCKER","status":"READY","tags":[],"sysTags":["bug"],"htmlDesc":"<p>\n  <code>NaN</code> is not equal to anything, even itself. Testing for equality or inequality against <code>NaN</code> will yield predictable results, but probably not the ones you want.\n</p>\n<p>\n  Instead, the best way to see whether a variable is equal to <code>NaN</code> is (perhaps counter-intuitively) to compare it to itself. Since <code>NaN !== NaN</code>, when <code>a !== a</code>, you know it must equal <code>NaN</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar a = NaN;\n\nif (a === NaN) {  // Noncompliant; always false\n  console.log(\"a is not a number\");  // this is dead code\n}\nif (a !== NaN) { // Noncompliant; always true\n  console.log(\"a is not NaN\"); // this statement is not necessarily true\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (a !== a) {\n  console.log(\"a is not a number\");\n}\nif (a === a) {\n  console.log(\"a is not NaN\");\n}\n</pre>","debtCharName":"Reliability","debtSubCharName":"Logic","debtRemFnOffset":"5min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"BLOCKER"}]},{"rule":{"name":"\"new\" operators should be used with functions","createdAt":"2015-07-09T16:59:47+0000","severity":"CRITICAL","status":"READY","tags":[],"sysTags":["bug"],"htmlDesc":"<p>\n  The <code>new</code> keyword should only be used with objects that define a constructor function. Use it with anything else, and you'll get a <code>TypeError</code> because there won't be a constructor function for the <code>new</code> keyword to invoke.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction MyClass() {\n  this.foo = 'bar';\n}\n\nvar someClass = 1;\n\nvar obj1 = new someClass;    // Noncompliant;\nvar obj2 = new MyClass();    // Noncompliant if considerJSDoc parameter set to true. Compliant when considerJSDoc=false\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n/**\n * @constructor\n */\nfunction MyClass() {\n  this.foo = 'bar';\n}\n\nvar someClass = function(){\n  this.prop = 1;\n}\n\nvar obj1 = new someClass;  // Compliant\nvar obj2 = new MyClass();  // Compliant regardless of considerJSDoc value\n</pre>","debtCharName":"Reliability","debtSubCharName":"Instruction","debtRemFnOffset":"10min","params":[{"htmlDesc":"Consider only functions with @constructor tag as constructor functions","type":"BOOLEAN","defaultValue":"false"}]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"CRITICAL","params":[{"value":"false"}]}]},{"rule":{"name":"\"strict\" mode should be used with caution","createdAt":"2013-06-19T07:34:52+0000","severity":"INFO","status":"READY","tags":[],"sysTags":["cross-browser","user-experience"],"htmlDesc":"<p>\n  Even thought it may be a good practice to enforce JavaScript strict mode, doing so could result in unexpected behaviors on browsers that do not support it yet. Using this feature should therefore be done with caution and with full knowledge of the potential consequences on browsers that do not support it.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfunction strict() {\n  'use strict';\n}\n</pre>","debtCharName":"Reliability","debtSubCharName":"Architecture","debtRemFnOffset":"5min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"INFO"}]},{"rule":{"name":"\"switch\" statements should end with a \"default\" clause","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["cert","cwe","misra"],"htmlDesc":"<p>\nThe requirement for a final <code>default</code> clause is defensive programming.\nThe clause should either take appropriate action or contain a suitable comment as to why no action is taken.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nswitch (param) {  //missing default clause\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\nswitch (param) {\n  default: // default clause should be the last one\n    error();\n    break;\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used.</li>\n<li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause</li>\n<li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.</li>\n<li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause</li>\n<li> MISRA C:2012, 16.1 - All switch statements shall be well-formed</li>\n<li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label</li>\n<li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement</li>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/478.html\">MITRE, CWE-478</a> - Missing Default Case in Switch Statement</li>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/YgE\">CERT, MSC01-C</a> - Strive for logical completeness</li>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/JoIyAQ\">CERT, MSC01-CPP</a> - Strive for logical completeness</li>\n</ul>","debtCharName":"Reliability","debtSubCharName":"Logic","debtRemFnOffset":"5min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR"}]},{"rule":{"name":"\"switch\" statements should have at least 3 \"case\" clauses","createdAt":"2014-01-24T08:40:40+0000","severity":"MINOR","status":"READY","tags":[],"sysTags":["misra"],"htmlDesc":"<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>\n<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nswitch (variable) {\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nif (variable == 0) {\n  doSomething();\n} else {\n  doSomethingElse();\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause.</li>\n<li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause.</li>\n<li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses</li>\n</ul>","debtCharName":"Maintainability","debtSubCharName":"Readability","debtRemFnOffset":"5min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MINOR"}]},{"rule":{"name":"\"switch\" statements should not contain non-case labels","createdAt":"2014-01-24T08:40:40+0000","severity":"CRITICAL","status":"READY","tags":[],"sysTags":["misra","pitfall"],"htmlDesc":"<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing error.</p>\n<h2>Noncompliant Code Examples</h2>\n\n<p>Case 1, the code is syntactically correct but the behavior is not the expected one</p>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   // instead of \"case WEDNESDAY\"\n    doSomething();\n    break;\n  ...\n}\n</pre>\n<p>Case 2, the code is correct and behaves as expected but is hardly readable </p>\n<pre>\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(i = 0 ; i &lt; X ; i++) {\n         /* ... */\n        break foo;  // this break statement doesn't relate to the nesting case TUESDAY\n         /* ... */\n    }\n    break;\n    /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<p>Case 1</p>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n</pre>\n<p>Case 2</p>\n<pre>\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); // put the content of the labelled \"for\" statement in a dedicated method\n    break;\n\n    /* ... */\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used.</li>\n<li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.</li>\n<li> MISRA C:2012, 16.1 - All switch statements shall be well-formed</li>\n</ul>","debtCharName":"Maintainability","debtSubCharName":"Readability","debtRemFnOffset":"10min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"CRITICAL"}]},{"rule":{"name":"\"TODO\" tags should be handled","createdAt":"2014-01-24T08:40:40+0000","severity":"INFO","status":"READY","tags":[],"sysTags":[],"htmlDesc":"<p>\n  <code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.\n</p>\n<p>\n  Sometimes the developer will not have the time or will simply forget to get back to that tag.\n  This rule is meant to track those tags, and ensure that they do not go unnoticed.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction doSomething() {\n  // TODO\n}\n</pre>","debtCharName":"Maintainability","debtSubCharName":"Understandability","debtRemFnOffset":"20min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"INFO"}]},{"rule":{"name":"\"undefined\" should not be assigned","createdAt":"2015-05-20T05:01:36+0000","severity":"CRITICAL","status":"READY","tags":[],"sysTags":["pitfall"],"htmlDesc":"<p>\n  <code>undefined</code> is the value you get for variables and properties which have not yet been created. Use the same value to reset an existing variable and you lose the ability to distinguish between a variable that exists but has no value and a variable that does not yet exist. Instead, <code>null</code> should be used, allowing you to tell the difference between a property that has been reset and one that was never created.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar myObject = {};\n\n// ...\nmyObject.fname = undefined;  // Noncompliant\n// ...\n\nif (myObject.lname == undefined) {\n  // property not yet created\n}\nif (myObject.fname == undefined) {\n  // no real way of knowing the true state of myObject.fname\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar myObject = {};\n\n// ...\nmyObject.fname = null;\n// ...\n\nif (myObject.lname == undefined) {\n  // property not yet created\n}\nif (myObject.fname == undefined) {\n  // no real way of knowing the true state of myObject.fname\n}\n</pre>","debtCharName":"Reliability","debtSubCharName":"Logic","debtRemFnOffset":"2min"},"actives":[]},{"rule":{"name":"\"with\" statements should not be used","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["bug"],"htmlDesc":"<p>\n  The use of the <code>with</code> keyword produces an error in JavaScript strict mode code. However, that's not the worst that can be said against <code>with</code>.\n</p>\n<p>\n  Using <code>with</code> allows a short-hand access to an object's properties - assuming they're already set. But use <code>with</code> to access some property not already set in the object,\n  and suddenly you're catapulted out of the object scope and into the global scope, creating or overwriting variables there. Since the effects of <code>with</code> are entirely\n  dependent on the object passed to it, <code>with</code> can be dangerously unpredictable, and should never be used.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x = 'a';\n\nvar foo = {\n  y: 1\n}\n\nwith (foo) {  // Noncompliant\n  y = 4;  // updates foo.x\n  x = 3;  // does NOT add a foo.x property; updates x var in outer scope\n}\nprint(foo.x + \" \" + x); // shows: undefined 3\n</pre>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x = 'a';\n\nvar foo = {\n  y: 1\n}\n\nfoo.y = 4;\nfoo.x = 3;\n\nprint(foo.x + \" \" + x); // shows: 3 a\n</pre>","debtCharName":"Reliability","debtSubCharName":"Instruction","debtRemFnOffset":"30min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR"}]},{"rule":{"name":"A \"for\" loop update clause should move the counter in the right direction","createdAt":"2015-04-07T09:32:39+0000","severity":"BLOCKER","status":"READY","tags":[],"sysTags":["bug"],"htmlDesc":"A <code>for</code> loop with a stop condition that can never be reached, such as one with a counter that moves in the wrong direction, will run infinitely. While there are occasions when an infinite loop is intended, the convention is to construct such loops as <code>while</code> loops. More typically, an infinite <code>for</code> loop is a bug. \n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (var i = 0; i < strings.length; i--) { // Noncompliant;\n  //...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfor (var i = 0; i < strings.length; i++) {\n  //...\n}\n</pre>","debtCharName":"Reliability","debtSubCharName":"Instruction","debtRemFnOffset":"5min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"BLOCKER"}]},{"rule":{"name":"A \"while\" loop should be used instead of a \"for\" loop","createdAt":"2014-01-24T08:40:40+0000","severity":"MINOR","status":"READY","tags":[],"sysTags":["clumsy"],"htmlDesc":"<p>When only the condition expression is defined in a <code>for</code> loop, but the init and increment expressions are missing, a <code>while</code> loop should be used instead to increase readability. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;condition;) { /*...*/ }\n</pre>\n\n\n<h2>Compliant Solution</h2>\n<pre>\nwhile (condition) { /*...*/ }\n</pre>","debtCharName":"Maintainability","debtSubCharName":"Readability","debtRemFnOffset":"5min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MINOR"}]},{"rule":{"name":"Array and Object constructors should not be used","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["bug"],"htmlDesc":"<p>\n  Array and Object literals should always be preferred to Array and Object constructors.\n</p>\n\n<p>\n  Array constructors are error-prone due to the way their arguments are interpreted. If more than one argument is used, the array length will be equal to the number of arguments. However, using a single argument will have one of three consequences:\n</p>\n\n<ul>\n    <li>If the argument is a number and it is a natural number the length will be equal to the value of the argument.</li>\n    <li>If the argument is a number, but not a natural number an exception will be thrown.</li>\n    <li>Otherwise the array will have one element with the argument as its value.</li>\n</ul>\n\n<p>\n  For these reasons, if someone changes the code to pass 1 argument instead of 2 arguments, the array might not have the expected length. To avoid these kinds of weird cases, always use the more readable array.\n</p>\n\n<p>\n  Object constructors don't have the same problems, but for readability and consistency object literals should be used.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar a3 = new Array(x1); // Noncompliant and variable in results\nvar a4 = new Array();  // Noncompliant. Results in 0-element array.\nvar a1 = new Array(x1, x2, x3);  // Noncompliant. Results in 3-element array.\n\nvar o = new Object(); // Noncompliant\n\nvar o2 = new Object(); // Noncompliant\no2.a = 0;\no2.b = 1;\no2.c = 2;\no2['strange key'] = 3;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar a = [x1, x2, x3];\nvar a2 = [x1, x2];\nvar a3 = [x1];\nvar a4 = [];\n\nvar o = {};\n\nvar o2 = {\n  a: 0,\n  b: 1,\n  c: 2,\n  'strange key': 3\n};\n</pre>","debtCharName":"Reliability","debtSubCharName":"Logic","debtRemFnOffset":"5min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR"}]},{"rule":{"name":"Assignments should not be made from within sub-expressions","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["bug","cwe","misra"],"htmlDesc":"<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable.</p>\n<p>It is also a common mistake to write <code>=</code> when <code>==</code> was meant.</p>\n<p>Ideally, expressions should not have side-effects.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\ndoSomething(i = 42);\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\ni = 42;\ndoSomething(i);   \n// or\ndoSomething(i == 42);  // Perhaps in fact the comparison operator was expected\n</pre>\n<h2>Exceptions</h2>\n<p>Assignments in <code>while</code> statement conditions, and assignments enclosed in relational expressions are allowed.</p>\n<pre>\nwhile ((line = nextLine()) != null) {...}  // Compliant\n\nwhile (line = nextLine()) {...}  // Compliant\n\nif (line = nextLine()) {...}  // Noncompliant\n</pre><h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value</li>\n<li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions</li>\n<li> MISRA C:2012, 13.4 - The result of of an assignment operator should not be used</li>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/481.html\">MITRE, CWE-481</a> - Assigning instead of Comparing</li>\n</ul>","debtCharName":"Reliability","debtSubCharName":"Instruction","debtRemFnOffset":"5min"},"actives":[]},{"rule":{"name":"Avoid use of conditional operator","createdAt":"2013-06-19T07:34:52+0000","severity":"MINOR","status":"READY","tags":[],"sysTags":["confusing"],"htmlDesc":"<p>\nCondition operators can quickly become hard to be read.\n</p>\n\n<p>\nThe following code snippet illustrates this rule :\n</p>\n\n<pre>\nfunction sayHello() {\n  var a = (a === 'A') ? 'is A' : 'is not A'; // Non-Compliant\n}\n</pre>","debtCharName":"Maintainability","debtSubCharName":"Understandability","debtRemFnOffset":"5min"},"actives":[]},{"rule":{"name":"Bitwise operators should not be used","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["pitfall"],"htmlDesc":"<p>JavaScript does not have an integer type, but it does have bitwise operators <code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code>, <code>~</code>, <code>&amp;</code>, <code>|</code>. These operators convert their operands from floating point values to integers and back, so they are not as efficient as in C or other languages. Further, they are rarely useful in browser applications, and the similarity to the logical operators can mask some programming errors.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif (a &amp; b) { ... } // Noncompliant; &amp; used in error\nvar oppositeSigns = ((x ^ y) &lt; 0); // Noncompliant; there's a clearer way to test for this\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nif (a &amp;&amp; b) { ... }\nvar oppositeSigns = false;\nif ( (x &lt; 0 &amp;&amp; y &gt; 0) || (x &gt; 0 &amp;&amp; y &lt; 0) ) {\n  oppositeSigns = true;\n}\n</pre>","debtCharName":"Maintainability","debtSubCharName":"Understandability","debtRemFnOffset":"5min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR"}]},{"rule":{"name":"Branches should have sufficient coverage by unit tests","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["bad-practice"],"htmlDesc":"<p>An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.</p>","debtCharName":"Testability","debtSubCharName":"Unit level","defaultDebtRemFnCoeff":"5min","effortToFixDescription":"number of uncovered conditions","debtRemFnCoeff":"5min","params":[{"htmlDesc":"The minimum required branch coverage ratio.","type":"STRING","defaultValue":"65.0"}]},"actives":[]},{"rule":{"name":"Built-in objects should not be overridden","createdAt":"2015-05-20T05:01:36+0000","severity":"CRITICAL","status":"READY","tags":[],"sysTags":["bug","confusing"],"htmlDesc":"<p>\n  Overriding an object changes its behavior and could potentially impact all code using that object. Overriding standard, built-in objects could therefore have broad,\n  catastrophic effects on previously-working code.\n</p>\n\n<p>This rule detects overrides of the following native objects:</p>\n\n<ul>\n  <li>Fundamental objects - Object, Function, Boolean, Symbol, Error, EvalError, InternalError, RangeError, ReferenceError, SyntaxError, TypeError, URIError</li>\n  <li>Numbers and dates - Number, Math, Date</li>\n  <li>Text processing - String, RegExp</li>\n  <li>Indexed collections - Array, Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Unit16Array, Int32Array, Uint32Array, Float32Array, Float64Array</li>\n  <li>Keyed collections - Map, Set, WeakMap, WeakSet</li>\n  <li>Structured data - ArrayBuffer, DataView, JSON</li>\n  <li>Control abstraction objects - Promise</li>\n  <li>Reflection - Reflect, Proxy</li>\n  <li>Internationalization - Intl</li>\n  <li>Non-standard objects - Generator, Iterator, ParallelArray, StopIteration</li>\n</ul>","debtCharName":"Reliability","debtSubCharName":"Instruction","debtRemFnOffset":"20min"},"actives":[]},{"rule":{"name":"Code should not be dynamically injected and executed to prevent Eval Injection vulnerability","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","tags":[],"sysTags":["cwe","owasp-a3","security"],"htmlDesc":"<p>The <code>eval</code> function is a way to run arbitrary code at run-time. Generally it is considered to be very dangerous because it allows execution of arbitrary code. Its use is thus discouraged. If you have carefully verified that there is no other option than to use this construct, pay special attention not to pass any user-provided data into it without properly validating it beforehand.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\neval(code_to_be_dynamically_executed)\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/95.html\">MITRE CWE-95</a> - CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')</li>\n<li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_(XSS)\">OWASP Top Ten 2013 Category A3</a> - Cross-Site Scripting (XSS)</li>\n</ul>","debtCharName":"Security","debtSubCharName":"Input validation and representation","debtRemFnOffset":"30min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"CRITICAL"}]},{"rule":{"name":"Collapsible \"if\" statements should be merged","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["clumsy"],"htmlDesc":"<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif (x != undefined) {\n  if (x === 2) {\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nif (x != undefined &amp;&amp; x === 2) {\n  // ...\n}\n</pre>","debtCharName":"Maintainability","debtSubCharName":"Readability","debtRemFnOffset":"5min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR"}]},{"rule":{"name":"Comma operator should not be used","createdAt":"2014-01-24T08:40:40+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["misra"],"htmlDesc":"<p>The comma operator takes two expressions, executes them from left to right and returns the result of the second one. Use of this operator is generally detrimental to the readability and reliability of code, and the same effect can be achieved by other means.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\ni = a += 2, a + b;  // What's the value of i ?\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\na +=  2;\ni = a + b;\n</pre>\n<h2>Exceptions</h2>\n\n<p>Use of comma operator is tolerated in initialization and increment expressions of <code>for</code> loops.</p>\n<pre>\nfor(i = 0, j = 5; i &lt; 6; i++, j++) { ... }\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 12.10 - The comma operator shall not be used.</li>\n<li> MISRA C++:2008, 5-18-1 - The comma operator shall not be used.</li>\n<li> MISRA C:2012, 12.3 - The comma operator should not be used</li>\n</ul>","debtCharName":"Maintainability","debtSubCharName":"Understandability","debtRemFnOffset":"5min"},"actives":[]},{"rule":{"name":"Comments should not be located at the end of lines of code","createdAt":"2013-06-19T07:34:52+0000","severity":"INFO","status":"READY","tags":[],"sysTags":["convention"],"htmlDesc":"<p>This rule verifies that single-line comments are not located at the end of a line of code.\nThe main idea behind this rule is that in order to be really readable,\ntrailing comments would have to be properly written and formatted (correct alignment,\nno interference with the visual structure of the code, not too long to be visible) but most often,\nautomatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar a1 = b + c; // This is a trailing comment that can be very very long\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n// This very long comment is better placed before the line of code\nvar a2 = b + c;\n</pre>\n\n<h2>Exceptions</h2>\n\n<p>By default, the property \"legalTrailingCommentPattern\" allows to ignore comments containing only one word :</p>\n<pre>\ndoSomething(); //FIXME\n</pre>","debtCharName":"Maintainability","debtSubCharName":"Readability","debtRemFnOffset":"1min","params":[{"htmlDesc":"Pattern for text of trailing comments that are allowed.","type":"STRING","defaultValue":"^//\\s*+[^\\s]++$"}]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"INFO","params":[{"value":"^//\\s*+[^\\s]++$"}]}]},{"rule":{"name":"Console logging should not be used","createdAt":"2015-04-07T09:32:39+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["owasp-a6","security"],"htmlDesc":"<p>\n  Debug statements are always useful during development. But include them in production code - particularly in code that runs client-side - and you run the risk of inadvertently exposing sensitive information, slowing down the browser, or even erroring-out the site for some users. (Not all browsers support <code>console.log()</code>).\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nconsole.log(password_entered); // Noncompliant\n</pre>\n\n<h2>See</h2>\n\n<ul>\n<li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure </li>\n</ul>","debtCharName":"Security","debtSubCharName":"Security features","debtRemFnOffset":"5min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR"}]},{"rule":{"name":"Constructor functions should not be called purely for side-effects","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["pitfall"],"htmlDesc":"<p>Some people like to call a constructor functions without assigning the result to a variable. There is no advantage in this approach since the object the <code>new</code> operator creates isn't used anywhere. Therefore this misleading syntax should be avoided.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nnew MyConstructor(); // Non-Compliant\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nvar something = new MyConstructor();  // Compliant\n</pre>","debtCharName":"Maintainability","debtSubCharName":"Understandability","debtRemFnOffset":"5min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR"}]},{"rule":{"name":"Control flow statements \"if\", \"for\", \"while\", \"switch\" and \"try\" should not be nested too deeply","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["brain-overload"],"htmlDesc":"<p>\n  Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code> and <code>try</code> statements is a key ingredient for making what's known as \"Spaghetti code\".\n  Such code is hard to read, refactor and therefore maintain.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>\n  The following code snippet illustrates this rule with the default threshold of 3.\n</p>\n\n<pre>\n  if (condition1) {                  // Compliant - depth = 1\n    /* ... */\n    if (condition2) {                // Compliant - depth = 2\n      /* ... */\n      for(int i = 0; i < 10; i++) {  // Compliant - depth = 3, not exceeding the limit\n        /* ... */\n        if (condition4) {            // Non-Compliant - depth = 4\n          if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n            /* ... */\n          }\n          return;\n        }\n      }\n    }\n  }\n</pre>","debtCharName":"Changeability","debtSubCharName":"Logic","debtRemFnOffset":"10min","params":[{"htmlDesc":"Maximum allowed &quot;if/for/while/switch/try&quot; statements nesting depth","type":"INTEGER","defaultValue":"3"}]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[{"value":"3"}]}]},{"rule":{"name":"Control structures should always use curly braces","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["cert","cwe","misra","pitfall"],"htmlDesc":"<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n// the two statements seems to be attached to the if statement, but that is only true for the first one:\nif (condition)\n  executeSomething();\n  checkSomething();\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nif (condition) {\n  executeSomething();\n  checkSomething();\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement</li>\n<li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement</li>\n<li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement</li>\n<li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement</li>\n<li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement</li>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/1QGMAg\">CERT, EXP19-C</a> - Use braces for the body of an if, for, or while statement</li>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/483.html\">MITRE, CWE-483</a> - Incorrect Block Delimitation</li>\n</ul>","debtCharName":"Maintainability","debtSubCharName":"Readability","debtRemFnOffset":"2min"},"actives":[]},{"rule":{"name":"Copyright and license headers should be defined","createdAt":"2014-01-24T08:40:40+0000","severity":"BLOCKER","status":"READY","tags":[],"sysTags":[],"htmlDesc":"<p>\n    Each source file should start with a header stating file ownership and the license which must be used to distribute the application.\n</p>\n<p>\n    This rule must be fed with the header text that is expected at the beginning of every file.\n</p>\n\n<h2>Compliant Solution</h2>\n<pre>\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n</pre>","params":[{"htmlDesc":"Expected copyright and license header (plain text)","type":"TEXT"}]},"actives":[]},{"rule":{"name":"Cross-document messaging domains should be carefully restricted","createdAt":"2015-07-09T16:59:47+0000","severity":"CRITICAL","status":"READY","tags":[],"sysTags":["html5","owasp-a3","security"],"htmlDesc":"<p>\n  HTML5 adds the ability to send messages to documents served from other domains. To mitigate the risk of sending sensitive information to a document served from a hostile or\n  unknown domain, this rule raises an issue each time <code>Window.postMessage</code> is used.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvar myWindow = document.getElementById('myIFrame').contentWindow;\nmyWindow.postMessage(message, \"*\"); // Noncompliant; how do you know what you loaded in 'myIFrame' is still there?\n</pre>\n\n<h2>See</h2>\n<ul>\n  <li><a href=\"https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_(XSS)\">OWASP Top Ten 2013 Category A3</a> - Cross-Site Scripting (XSS)</li>\n</ul>","debtCharName":"Security","debtSubCharName":"Security features","debtRemFnOffset":"10min"},"actives":[]},{"rule":{"name":"Dead Stores should be removed","createdAt":"2015-05-20T05:01:36+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["bug","cert","cwe","unused"],"htmlDesc":"<p>\n  A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value only to then overwrite it or\n  throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources. Therefore all calculated values should be used.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfunction pow(a, b) {\n  if(b == 0) {\n    return 0;\n  }\n  var x = a;\n  for(var i = 1, i < b, i++) {\n    x = x * a;  //Dead store because the last return statement should return x instead of returning a\n  }\n  return a;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nfunction pow(a, b) {\n  if(b == 0) {\n    return 0;\n  }\n  var x = a;\n  for(var i = 1, i < b, i++) {\n    x = x * a;\n  }\n  return x;\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n  <li><a href=\"http://cwe.mitre.org/data/definitions/563.html\">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable')</li>\n  <li><a href=\"https://www.securecoding.cert.org/confluence/x/QYA5\">CERT, MSC13-C</a> - Detect and remove unused values</li>\n  <li><a href=\"https://www.securecoding.cert.org/confluence/x/S4IyAQ\">CERT, MSC13-CPP</a> - Detect and remove unused values</li>\n</ul>","debtCharName":"Reliability","debtSubCharName":"Data","debtRemFnOffset":"15min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR"}]},{"rule":{"name":"Debugger statements should not be used","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","tags":[],"sysTags":["cwe","security","user-experience"],"htmlDesc":"<p>The debugger statement can be placed anywhere in procedures to suspend execution. Using the debugger statement is similar to setting a breakpoint in the code. By definition such statement must absolutely be removed from the source code to prevent any unexpected behavior or added vulnerability to attacks in production.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfor (i = 1; i&lt;5; i++) {\n  // Print i to the Output window.\n  Debug.write(\"loop index is \" + i);\n  // Wait for user to resume.\n  debugger;\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nfor (i = 1; i&lt;5; i++) {\n  // Print i to the Output window.\n  Debug.write(\"loop index is \" + i);\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code</li>\n</ul>","debtCharName":"Security","debtSubCharName":"Security features","debtRemFnOffset":"5min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"CRITICAL"}]},{"rule":{"name":"Deprecated jQuery methods should not be used","createdAt":"2015-05-20T05:01:36+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["jquery","obsolete"],"htmlDesc":"<p>\n  Deprecation is a warning that a method has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away from the aging,\n  soon-to-be-retired technology.\n</p>\n\n<p>This rule raises an issue when any of the following methods is used:</p>\n\n<ul>\n  <li><code>.andSelf()</code></li>\n  <li><code>.context</code></li>\n  <li><code>.die()</code></li>\n  <li><code>.error()</code></li>\n  <li><code>jQuery.boxModel</code></li>\n  <li><code>jQuery.browser</code></li>\n  <li><code>jQuery.sub()</code></li>\n  <li><code>jQuery.support</code></li>\n  <li><code>.live()</code></li>\n  <li><code>.load()</code></li>\n  <li><code>.selector</code></li>\n  <li><code>.size()</code></li>\n  <li><code>.toggle()</code></li>\n  <li><code>.unload()</code></li>\n</ul>","debtCharName":"Portability","debtSubCharName":"Software","debtRemFnOffset":"20min"},"actives":[]},{"rule":{"name":"Each statement should end with a semicolon","createdAt":"2013-06-19T07:34:52+0000","severity":"MINOR","status":"READY","tags":[],"sysTags":["convention"],"htmlDesc":"<p>In JavaScript, the semicolon (<code>;</code>) is optional as a statement separator, but omitting semicolons can be confusing, and lead to unexpected results because a semicolon is implicitly inserted at the end of each line.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfunction fun() {\n  return  // Noncompliant. ';' implicitly inserted at end of line\n       5   // Noncompliant. ';' implicitly inserted at end of line\n}\nprint(fun());  // prints \"undefined\", not \"5\"\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nfunction fun() {\n  return 5;\n}\nprint(fun());\n</pre>","debtCharName":"Reliability","debtSubCharName":"Logic","debtRemFnOffset":"1min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MINOR"}]},{"rule":{"name":"Element type selectors should not be used with class selectors","createdAt":"2015-05-20T05:01:36+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["jquery","performance","user-experience"],"htmlDesc":"<p>Using element type in class selectors is slower than using only the class selector.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>var $products = $(\"div.products\");    // Noncompliant - slow</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>var $products = $(\".products\");    // Compliant - fast</pre>","debtCharName":"Efficiency","debtSubCharName":"Processor use","debtRemFnOffset":"2min"},"actives":[]},{"rule":{"name":"Expressions should not be too complex","createdAt":"2014-01-24T08:40:40+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["brain-overload"],"htmlDesc":"<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code> operators it contains.</p>\n<p>A single expression's complexity should not become too high to keep the code readable.</p>","params":[{"htmlDesc":"Maximum number of allowed conditional operators in an expression","type":"INTEGER","defaultValue":"3"}]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[{"value":"3"}]}]},{"rule":{"name":"Files should contain an empty new line at the end","createdAt":"2013-06-19T07:34:52+0000","severity":"MINOR","status":"READY","tags":[],"sysTags":["convention"],"htmlDesc":"<p>Some tools such as Git work better when files end with an empty line.</p>\n<p>This rule simply generates an issue if it is missing.</p>\n<p>For example, a Git diff look like:</p>\n<pre>\n+class Test {\n+}\n\\ No newline at end of file\n</pre>\n<p>if the empty line is missing at the end of the file.</p>","debtCharName":"Maintainability","debtSubCharName":"Readability","debtRemFnOffset":"1min"},"actives":[]},{"rule":{"name":"Files should not have too many lines","createdAt":"2014-01-24T08:40:40+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["brain-overload"],"htmlDesc":"<p>\n  A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.</br>\n  Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks.</br>\n  Those smaller files will not only be easier to understand but also probably easier to test.\n</p>","debtCharName":"Maintainability","debtSubCharName":"Readability","debtRemFnOffset":"1h","params":[{"htmlDesc":"Maximum authorized lines in a file.","type":"INTEGER","defaultValue":"1000"}]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[{"value":"1000"}]}]},{"rule":{"name":"Function argument names should be unique","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","tags":[],"sysTags":["pitfall"],"htmlDesc":"<p>Function arguments should all have different names to prevent any ambiguity. Indeed, if arguments have the same name, the last duplicated argument hides all the previous arguments with the same name. This hiding makes no sense, reduces understandability and maintainability, and obviously can be error prone. </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfunction compute(a, a, c) { // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nfunction compute(a, b, c) { // Compliant\n}\n</pre>","debtCharName":"Maintainability","debtSubCharName":"Understandability","debtRemFnOffset":"5min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"CRITICAL"}]},{"rule":{"name":"Function call arguments should not start on new line","createdAt":"2014-01-24T08:40:40+0000","severity":"CRITICAL","status":"READY","tags":[],"sysTags":["pitfall"],"htmlDesc":"<p>Because semicolons at the ends of statements are optional, starting function call arguments on a separate line makes the code confusing. It could lead to errors and most likely <em>will</em> lead to questions for maintainers.</p>\n<p>What was the initial purpose of the developer ?</p>\n<ol>\n<li> Was it to define a function and then to execute some unrelated code inside a closure ?</li>\n<li> Or to pass the second function as a parameter to the first one ?</li>\n</ol>\n<p>The first option will be the one chosen by the JavaScript interpreter..</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvar fn = function () {\n  //...\n}\n\n(function () { // Noncompliant\n  //...\n})();\n</pre>\n<h2>Compliant Solution</h2>\n\n<p>Either</p>\n<pre>\n// define a function\nvar fn = function () {\n  //...\n}; // &lt;-- semicolon added\n\n// then execute some code inside a closure\n(function () {\n  //...\n})();\n</pre>\n<p>Or </p>\n<pre>\nvar fn = function () {\n  //...\n}(function () { // &lt;-- start function call arguments on same line\n  //...\n})();\n</pre>\n<p>By extension and to improve readability, any kind of function call arguments should not start on new line.</p>","debtCharName":"Reliability","debtSubCharName":"Instruction","debtRemFnOffset":"5min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"CRITICAL"}]},{"rule":{"name":"Function calls should not pass extra arguments","createdAt":"2015-07-09T16:59:47+0000","severity":"CRITICAL","status":"READY","tags":[],"sysTags":["bug","cwe","misra"],"htmlDesc":"<p>You can easily call a JavaScript function with more arguments than the function needs, but the extra arguments will be just ignored by function execution.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction say(a, b) {\n  print(a + \" \" + b);\n}\n\nsay(\"hello\", \"world\", \"!\"); // Noncompliant; last argument is not used\n</pre>\n\n<h2>Exceptions</h2>\n<p>No issue is reported when <code>arguments</code> is used in the body of the function being called.</p>\n\n<pre>\nfunction doSomething(a, b) {\n  compute(arguments);\n}\n\ndoSomething(1, 2, 3) // Compliant\n</pre>","debtCharName":"Reliability","debtSubCharName":"Data","debtRemFnOffset":"10min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"CRITICAL"}]},{"rule":{"name":"Function declarations should not be made within blocks","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["cross-browser","user-experience"],"htmlDesc":"<p>\n  While most script engines support function declarations within blocks, it is not part of ECMAScript 5 and below, and from browser to browser the implementations are inconsistent with each other. ECMAScript 5 and below only allows function declarations in the root statement list of a script or function. If you are targeting browsers that don't support ECMAScript 6, use a variable initialized with a function expression to define a function within a block :\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x) {\n  function foo() {}\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (x) {\n  var foo = function() {}\n}\n</pre>","debtCharName":"Reliability","debtSubCharName":"Instruction","debtRemFnOffset":"5min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR"}]},{"rule":{"name":"Function names should comply with a naming convention","createdAt":"2014-01-24T08:40:40+0000","severity":"MINOR","status":"READY","tags":[],"sysTags":["convention"],"htmlDesc":"<p>\n  Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all function names match a provided regular expression.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction DoSomething(){...}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething(){...}\n</pre>","debtCharName":"Maintainability","debtSubCharName":"Readability","debtRemFnOffset":"5min","params":[{"htmlDesc":"Regular expression used to check the function names against.","type":"STRING","defaultValue":"^[a-z][a-zA-Z0-9]*$"}]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MINOR","params":[{"value":"^[a-z][a-zA-Z0-9]*$"}]}]},{"rule":{"name":"Functions should not be defined inside loops","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["bug"],"htmlDesc":"<p>\n  Defining a function inside of a loops can yield unexpected results because under the covers, only a single instance of the function is defined. Rather than creating new function instances, the loop iterations simply update the function's variables. Instead, the function should be returned.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar funs = [];\nfor (var i = 0; i < 13; i++) {\n  funs[i] = function() { // Non-Compliant\n    return i;\n  };\n}\nprint(funs[0]()); // 13 instead of 0\nprint(funs[1]()); // 13 instead of 1\nprint(funs[2]()); // 13 instead of 2\nprint(funs[3]()); // 13 instead of 3\n...\n</pre>","debtCharName":"Reliability","debtSubCharName":"Instruction","debtRemFnOffset":"30min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR"}]},{"rule":{"name":"Functions should not be too complex","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["brain-overload"],"htmlDesc":"<p>The cyclomatic complexity of functions should not exceed a defined threshold.</p>\n<p>Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>","debtCharName":"Testability","debtSubCharName":"Unit level","debtRemFnOffset":"1h","params":[{"htmlDesc":"The maximum authorized complexity in function","type":"INTEGER","defaultValue":"10"}]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[{"value":"10"}]}]},{"rule":{"name":"Functions should not have too many lines","createdAt":"2014-01-24T08:40:40+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["brain-overload"],"htmlDesc":"<p>\n  A function that grows too large tends to aggregate too many responsibilities.</br>\n  Such function inevitably become harder to understand and therefore harder to maintain.\n</p>\n<p>\n  Above a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.\n</p>\n<p>\n  Those smaller functions will not only be easier to understand, but also probably easier to test.\n</p>\n\n<h2>Exceptions</h2>\n<p>\n  This function ignores Immediately Invoked Function Expressions (IIFE), functions which are created and invoked without ever being assigned a name.\n</p>\n<pre>\n (function () { // Ignored by this rule\n\n  function open() {  // Classic function declaration; not ignored\n    // ...\n  }\n\n  function read() {\n    // ...\n  }\n\n  function readlines() {\n    // ...\n  }\n})();\n</pre>","debtCharName":"Maintainability","debtSubCharName":"Understandability","debtRemFnOffset":"20min","params":[{"htmlDesc":"Maximum authorized lines in a function","type":"INTEGER","defaultValue":"100"}]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[{"value":"100"}]}]},{"rule":{"name":"Functions should not have too many parameters","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["brain-overload"],"htmlDesc":"<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many things.</p>\n\n<h2>Noncompliant Code Example</h2>\nThe following code snippet illustrates this rule with a maximum number of 4 parameters:\n<pre>\nfunction doSomething(param1, param2, param3, param4, param5) { \n...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4) {\n...\n}\n</pre>","debtCharName":"Testability","debtSubCharName":"Unit level","debtRemFnOffset":"20min","params":[{"htmlDesc":"The maximum authorized number of parameters","type":"INTEGER","defaultValue":"7"}]},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR","params":[{"value":"7"}]}]},{"rule":{"name":"HTML-style comments should not be used","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["bug"],"htmlDesc":"<p>\n  HTML-style comments are not part of EcmaScript specification, and should not be used.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;!-- Noncompliant -->\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n// Compliant\n/* Compliant */\n</pre>","debtCharName":"Portability","debtSubCharName":"Language","debtRemFnOffset":"5min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR"}]},{"rule":{"name":"Identical expressions should not be used on both sides of a binary operator","createdAt":"2015-04-07T09:32:39+0000","severity":"CRITICAL","status":"READY","tags":[],"sysTags":["bug","cert"],"htmlDesc":"<p>\n  Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical operators, having the same value on both sides of an operator yields predictable results, and should be simplified.\n</p>\n\n<p>\nThis rule ignores <code>*</code>, <code>+</code>, and <code>=</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\n\nvar j = 5 / 5; //always 1\nvar k = 5 - 5; //always 0\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ndoZ();\n\nif ( a == b ) {\n  doX();\n}\nif ( a == b ) {\n  doW();\n}\n\nvar j = 1;\nvar k = 0;\n</pre>\n\n<h2>Exceptions</h2>\n<p>The specific case of testing one variable against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>\n<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.</p>\n<pre>\nif(f !== f) { // test for NaN value\n  console.log(\"f is NaN\");\n}\n\nvar i = 1 &lt;&lt; 1; // Compliant\nvar j = a &lt;&lt; a; // Noncompliant\n</pre>\n\n<h2>See</h2>\n\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C</a> - Detect and remove code that has no effect</li>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP</a> - Detect and remove code that has no effect</li>\n<li> Rule <a href='/coding_rules#rule_key=javascript:S1656'>S1656</a> - Implements a check on <code>=</code>. </li>\n</ul>","debtCharName":"Reliability","debtSubCharName":"Logic","debtRemFnOffset":"2min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"CRITICAL"}]},{"rule":{"name":"Internet Explorer's conditional comments should not be used","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["cross-browser"],"htmlDesc":"<p>\n  Internet Explorer offers a way to change the JavaScript code at runtime using conditional comments (activated by a @cc_on statement found in a comment). Using this preprocessing feature decreases readability and maintainability, and can hinder automated tools. What's more, it is specific to Internet Explorer and won't work for other browsers.\n</p>\n\n</p>\n  Most of the time, using those conditional comments can be easily avoided with some refactoring - using modern cross-browsers JavaScript frameworks and libraries.\n  The following code snippet illustrates the use of conditional comments:\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n/*@cc_on\n  @if (@_jscript_version >= 5.5)\n    document.write(\"You are using IE5.5 or newer\");\n  @else\n    document.write(\"You are using IE5 or older\");\n  @end\n  @*/\n</pre>","debtCharName":"Reliability","debtSubCharName":"Logic","debtRemFnOffset":"5min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR"}]},{"rule":{"name":"JavaScript parser failure","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":[],"htmlDesc":"<p>When the JavaScript parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number of files that do not parse but also to easily find out why they do not parse.</p>","debtCharName":"Reliability","debtSubCharName":"Instruction","debtRemFnOffset":"30min"},"actives":[]},{"rule":{"name":"JQuery cache variables should comply with a convention name","createdAt":"2015-05-20T05:01:36+0000","severity":"MINOR","status":"READY","tags":[],"sysTags":["convention","jquery"],"htmlDesc":"<p>Shared naming conventions allow teams to collaborate efficiently.\n  This rule checks that all variables names that are used to store/cache jQuery objects match a provided regular expression.</p>","debtCharName":"Maintainability","debtSubCharName":"Understandability","debtRemFnOffset":"5min","params":[{"htmlDesc":"Regular expression used to check the variable names against","type":"STRING","defaultValue":"^\\$[a-z][a-zA-Z0-9]*$"}]},"actives":[]},{"rule":{"name":"Jump statements should not be followed by other statements","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["cert","cwe","misra","unused"],"htmlDesc":"<p>Jump statements (<code>return</code>, <code>break</code> and <code>continue</code>) and <code>throw</code> expressions move control flow out of the current code block. Typically, any statements in a block that come after a jump or <code>throw</code> are simply wasted keystrokes lying in wait to confuse the unwary. </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfun(a) {\n  var i = 10;\n  return i + a;       // Noncompliant \n  i++;             // this is never executed\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nint fun(int a) {\n  int i = 10;\n  return i + a;\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> MISRA C++:2008, 0-1-9 - There shall be no dead code</li>\n<li> MISRA C:2012, 2.2 - There shall be no dead code</li>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/561.html\">MITRE, CWE-561</a> - Dead Code</li>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C</a> - Detect and remove code that has no effect or is never executed</li>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP</a> - Detect and remove code that has no effect</li>\n</ul>","debtCharName":"Reliability","debtSubCharName":"Logic","debtRemFnOffset":"5min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR"}]},{"rule":{"name":"Lines should have sufficient coverage by unit tests","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["bad-practice"],"htmlDesc":"<p>An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.</p>","debtCharName":"Testability","debtSubCharName":"Unit level","defaultDebtRemFnCoeff":"2min","effortToFixDescription":"number of lines under the coverage threshold","debtRemFnCoeff":"2min","params":[{"htmlDesc":"The minimum required line coverage ratio.","type":"STRING","defaultValue":"65.0"}]},"actives":[]},{"rule":{"name":"Lines should not be too long","createdAt":"2013-06-19T07:34:52+0000","severity":"MINOR","status":"READY","tags":[],"sysTags":["convention"],"htmlDesc":"<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>","debtCharName":"Maintainability","debtSubCharName":"Readability","debtRemFnOffset":"1min","params":[{"htmlDesc":"The maximum authorized line length.","type":"INTEGER","defaultValue":"80"}]},"actives":[]},{"rule":{"name":"Lines should not end with trailing whitespaces","createdAt":"2013-06-19T07:34:52+0000","severity":"MINOR","status":"READY","tags":[],"sysTags":["convention"],"htmlDesc":"<p>Trailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same file.</p>\n<p>If you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the opportunity to do so. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n// The following string will error if there is a whitespace after '\\'\nvar str = \"Hello \\\nWorld\";\n</pre>","debtCharName":"Maintainability","debtSubCharName":"Readability","debtRemFnOffset":"1min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MINOR"}]},{"rule":{"name":"Literal boolean values should not be used in condition expressions","createdAt":"2014-01-24T08:40:40+0000","severity":"MINOR","status":"READY","tags":[],"sysTags":["clumsy"],"htmlDesc":"<p>\n  Remove literal boolean values from conditional expressions to improve readability. Anything that can be tested for equality with a boolean value must itself be a boolean value, and boolean values can be tested atomically.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanVariable == true) { /* ... */ }\nif (booleanVariable != true) { /* ... */ }\nif (booleanVariable || false) { /* ... */ }\ndoSomething(!false);\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanVariable) { /* ... */ }\nif (!booleanVariable) { /* ... */ }\nif (booleanVariable) { /* ... */ }\ndoSomething(true);\n</pre>\n\n<h2>Exceptions</h2>\n<p>\n  The use of literal booleans in comparisons which use identity operators (<code>===</code> and <code>!==</code>) are ignored.\n</p>","debtCharName":"Maintainability","debtSubCharName":"Readability","debtRemFnOffset":"2min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MINOR"}]},{"rule":{"name":"Local variables should not shadow \"undefined\"","createdAt":"2015-04-07T09:32:39+0000","severity":"CRITICAL","status":"READY","tags":[],"sysTags":["pitfall"],"htmlDesc":"<p>\n  It is possible to name a variable <code>undefined</code> in a local scope, but it is a very bad idea because <code>undefined</code> is what's returned for values and properties that have not yet been created. Make <code>undefined</code> a variable and you lose your ability to test whether other variables and properties exist.\n </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo () {\n   var undefined = 1; // Noncompliant\n   if (nonExistantVar == undefined) { // this logic doesn't work now\n     // ...\n   }\n }\n </pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo () {\n   var bob = 1; // anything is better than naming it 'undefined'\n   if (nonExistantVar == undefined) {\n     // ...\n   }\n }\n </pre>","debtCharName":"Reliability","debtSubCharName":"Instruction","debtRemFnOffset":"10min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"CRITICAL"}]},{"rule":{"name":"Loops should not contain more than a single \"break\" or \"continue\" statement","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["brain-overload"],"htmlDesc":"<p>\n  Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.\n</p>\n\n<p>\n  One <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one, the code should be refactored to increase readability.\n</p>\n\n<h2>Noncompiant Code Example</h2>\n<pre>\nfor (var i = 1; i <= 10; i++) {  // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  alert(\"i = \" + i);\n}\n</pre>","debtCharName":"Maintainability","debtSubCharName":"Understandability","debtRemFnOffset":"20min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR"}]},{"rule":{"name":"Multiline string literals should not be used","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["bad-practice"],"htmlDesc":"<p>Continuing a string across a linebreak is supported in most script engines, but it is not a part of ECMAScript. Additionally, the whitespace at the beginning of each line can't be safely stripped at compile time, and any whitespace after the slash will result in tricky errors.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvar myString = 'A rather long string of English text, an error message \\\n                actually that just keeps going and going -- an error \\\n                message to make the Energizer bunny blush (right through \\\n                those Schwarzenegger shades)! Where was I? Oh yes, \\\n                you\\'ve got an error and all the extraneous whitespace is \\\n                just gravy.  Have a nice day.';  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nvar myString = 'A rather long string of English text, an error message ' +\n    'actually that just keeps going and going -- an error ' +\n    'message to make the Energizer bunny blush (right through ' +\n    'those Schwarzenegger shades)! Where was I? Oh yes, ' +\n    'you\\'ve got an error and all the extraneous whitespace is ' +\n    'just gravy.  Have a nice day.';\n</pre>","debtCharName":"Reliability","debtSubCharName":"Instruction","debtRemFnOffset":"5min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR"}]},{"rule":{"name":"Named function expressions should not be used","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["cross-browser","user-experience"],"htmlDesc":"<p>\n  While named function expressions might be useful for debugging purposes, some browsers do not support them correctly (for example Internet Explorer 8).\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nf = function fun(){}; // Non-Compliant;  named function expression\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfun = function(){}; // Compliant; function expression\n</pre>\n\n<h2>Exceptions</h2>\n<p>ECMAScript 6 generator functions are excluded from this rule.</p>\n<pre>\nfunction* f() {} // Compliant; generator function.\n</pre>","debtCharName":"Portability","debtSubCharName":"Language","debtRemFnOffset":"15min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR"}]},{"rule":{"name":"Nested blocks of code should not be left empty","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["bug"],"htmlDesc":"<p>\n  Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (var i = 0; i < length; i++) {}  // Empty on purpose or missing piece of code ?\n</pre>\n\n<h2>Exceptions</h2>\n<p>\n  When a block contains a comment, this block is not considered to be empty.\n</p>","debtCharName":"Reliability","debtSubCharName":"Logic","debtRemFnOffset":"5min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR"}]},{"rule":{"name":"Octal values should not be used","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["cert","misra","pitfall"],"htmlDesc":"<p>\nInteger literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not have experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar myNumber = 010;   // myNumber will hold 8, not 10 - was this really expected?\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar myNumber = 8;\n</pre>\n\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 7.1 - Octal constants shall not be used</li>\n<li> MISRA C++:2008, 2-13-2 - Octal constants (other than zero) and octal escape sequences (other than \"\\0\") shall not be used</li>\n<li> MISRA C:2012, 7.1 - Octal constants shall not be used</li>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/_QC7AQ\">CERT DCL18-C</a> - Do not begin integer constants with 0 when specifying a decimal value</li>\n</ul>","debtCharName":"Reliability","debtSubCharName":"Data","debtRemFnOffset":"5min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR"}]},{"rule":{"name":"Only \"while\", \"do\" and \"for\" statements should be labelled","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["pitfall"],"htmlDesc":"<p>Any statement or block of statements can be identified by a label, but those labels should be used only on 'while', 'do-while' and 'for' statements. Using labels in any other context leads to unstructured, confusing code. </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nmyLabel:if (i % 2 == 0) {  // Noncompliant\n  if (i == 12) {\n    print(\"12\");\n    break myLabel;\n  }\n  print(\"Odd number, but not 12\");\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nmyLabel:for (i = 0; i &lt; 10; i++) {   // Compliant\n  print(\"Loop\");\n  break myLabel;\n}\n</pre>","debtCharName":"Reliability","debtSubCharName":"Logic","debtRemFnOffset":"20min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR"}]},{"rule":{"name":"Property names should not be duplicated within an object literal","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","tags":[],"sysTags":["bug","pitfall"],"htmlDesc":"<p>\n  JavaScript allows duplicate property names in object literals, but only the last instance of a duplicated property determines the actual value that will be used for it. Therefore, changing values of other occurrences of a duplicated property will have no effect and may cause misunderstandings and bugs.\n</p>\n\n<p>\n  What's more, using duplicate property names will generate an error in JavaScript strict mode code.\n  The following code snippet illustrates this rule :\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar data = {\n  \"key\": \"value\",\n  \"1\": \"value\",\n  \"key\": \"value\", // Noncompliant - duplicate of \"key\"\n  'key': \"value\", // Noncompliant - duplicate of \"key\"\n  key: \"value\", // Noncompliant - duplicate of \"key\"\n  \\u006bey: \"value\", // Noncompliant - duplicate of \"key\"\n  \"\\u006bey\": \"value\", // Noncompliant - duplicate of \"key\"\n  \"\\x6bey\": \"value\", // Noncompliant - duplicate of \"key\"\n  1: \"value\" // Noncompliant - duplicate of \"1\"\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar data = {\n  \"key\": \"value\",\n  \"1\": \"value\",\n  \"key2\": \"value\",\n  'key3': \"value\",\n  key4: \"value\",\n  \\u006bey5: \"value\",\n  \"\\u006bey6\": \"value\",\n  \"\\x6bey7\": \"value\",\n  1b: \"value\"\n}\n</pre>","debtCharName":"Reliability","debtSubCharName":"Instruction","debtRemFnOffset":"5min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"CRITICAL"}]},{"rule":{"name":"Regular expression on comment","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","isTemplate":true,"tags":[],"sysTags":[],"htmlDesc":"<p>This rule template can be used to create rules which will be triggered when a comment matches a given regular expression.</p>\n<p>For example, one can create a rule with the regular expression \"<code>.*TODO.*</code>\" to match all comment containing \"TODO\".</p>\n<p>Note that, in order to match TODO regardless of the case, the \"<code>(?i)</code>\" modifier can be prepended to the expression, as in \"<code>(?i).*TODO.*</code>\".</p>","params":[{"htmlDesc":"The regular expression","type":"STRING"},{"htmlDesc":"The issue message","type":"STRING","defaultValue":"The regular expression matches this comment."}]},"actives":[]},{"rule":{"name":"Related \"if/else if\" statements and \"cases\" in a \"switch\" should not have the same condition","createdAt":"2015-04-07T09:32:39+0000","severity":"CRITICAL","status":"READY","tags":[],"sysTags":["bug","cert","pitfall","unused"],"htmlDesc":"<p>\n  A <code>switch</code> and a chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first one with a condition that evaluates to <code>true</code>.\n</p>\n<p>\n  Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.\n</p>\n\n<p>\nFor a <code>switch</code>, if the first case ends with a break, the second case will never be executed, rendering it dead code. Worse there is the risk in this situation that future maintenance will be done on the dead case, rather than on the one that's actually used.\n</p>\n\n<p>\nOn the other hand, if the first case does not end with a break, both cases will be executed, but future maintainers may not notice that.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  // Noncompliant\n  moveWindowToTheBackground();\n\nswitch(i) {\n  case 1:\n    //...\n    break;\n  case 3:\n    //...\n    break;\n  case 1:  // Noncompliant\n    //...\n    break;\n  default:\n    // ...\n    break;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n\nswitch(i) {\n  case 1:\n    //...\n    break;\n  case 3:\n    //...\n    break;\n  default:\n    // ...\n    break;\n}\n</pre>\n\n<h2>See</h2>\n  <ul>\n    <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C</a> - Detect and remove code that has no effect </li>\n    <li><a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP</a>- Detect and remove code that has no effect </li>\n  </ul>","debtCharName":"Reliability","debtSubCharName":"Logic","debtRemFnOffset":"10min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"CRITICAL"}]},{"rule":{"name":"Relational operators should be used in \"for\" loop termination conditions","createdAt":"2015-05-20T05:01:36+0000","severity":"CRITICAL","status":"READY","tags":[],"sysTags":["bug","cert","cwe","misra"],"htmlDesc":"<p>\n  Testing <code>for</code> loop termination using an equality operator (<code>==</code> and <code>!=</code>) is dangerous, because it could set up an infinite loop.\n  Using a relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an infinite loop.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (var i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.\n{\n  //...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfor (var i = 1; i <= 10; i += 2)  // Compliant\n{\n  //...\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>An equality operator may be used if the loop counter is not modified within the body of the loop and either:</p>\n<ul>\n  <li>starts below the ending value and is incremented by 1 on each iteration.</li>\n  <li>starts above the ending value and is decremented by 1 on each iteration.</li>\n</ul>\n<p>Equality operators are also ignored when the test is against <code>null</code>.</p>\n<pre>\nfor (int i = 0; arr[i] != null; i++) {\n  // ...\n}\n\nfor (int i = 0; (item = arr[i]) != null; i++) {\n  // ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n  <li>MISRA C++:2008, 6-5-2</li>\n  <li><a href=\"http://cwe.mitre.org/data/definitions/835\">MITRE, CWE-835</a> - Loop with Unreachable Exit Condition ('Infinite Loop')</li>\n  <li><a href=\"https://www.securecoding.cert.org/confluence/x/EwDJAQ\">CERT, MSC21-C</a> - Use robust loop termination conditions</li>\n  <li><a href=\"https://www.securecoding.cert.org/confluence/x/GwDJAQ\">CERT, MSC21-CPP</a> - Use inequality to terminate a loop whose counter changes by more than one</li>\n</ul>","debtCharName":"Reliability","debtSubCharName":"Logic","debtRemFnOffset":"2min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"CRITICAL"}]},{"rule":{"name":"Return of boolean expressions should not be wrapped into an \"if-then-else\" statement","createdAt":"2014-01-24T08:40:40+0000","severity":"MINOR","status":"READY","tags":[],"sysTags":["clumsy"],"htmlDesc":"<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif (expression) {  \n  return true;\n} else {\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nreturn expression; \n</pre>\n<pre>\nreturn !!expression;\n</pre>","debtCharName":"Maintainability","debtSubCharName":"Readability","debtRemFnOffset":"2min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MINOR"}]},{"rule":{"name":"Sections of code should not be \"commented out\"","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["misra","unused"],"htmlDesc":"<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 2.4 - Sections of code should not be \"commented out\".</li>\n<li> MISRA C++:2008, 2-7-2 - Sections of code shall not be \"commented out\" using C-style comments.</li>\n<li> MISRA C++:2008, 2-7-3 - Sections of code should not be \"commented out\" using C++ comments.</li>\n<li> MISRA C:2012, Dir. 4.4 - Sections of code should not be \"commented out\"</li>\n</ul>","debtCharName":"Maintainability","debtSubCharName":"Understandability","debtRemFnOffset":"5min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR"}]},{"rule":{"name":"Selection results should be tested with \"length\"","createdAt":"2015-05-20T05:01:36+0000","severity":"CRITICAL","status":"READY","tags":[],"sysTags":["bug","jquery"],"htmlDesc":"<p>\n  Once you've made a selection, you typically want to know whether it actually found anything. Since selectors always return an object (the set of selected DOM elements), the\n  best way to see whether your selection found anything is to test the returned object's .length property.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( $( \"div.foo\" ) ) {  // Noncompliant\n  // this code always runs, even when the selector didn't match any elements\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n// Testing whether a selection contains elements.\nif ( $( \"div.foo\" ).length > 0) {\n  // this code only runs if elements were found\n  //  ...\n}\n</pre>","debtCharName":"Reliability","debtSubCharName":"Logic","debtRemFnOffset":"2min"},"actives":[]},{"rule":{"name":"Selections should be stored","createdAt":"2015-05-20T05:01:36+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["jquery","performance","user-experience"],"htmlDesc":"<p>\n  jQuery doesn't cache elements for you. If you've made a selection that you might need to make again, you should save the selection in a variable rather than making the\n  selection repeatedly.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n$( \"p\" ).hide();\n$( \"p\" ).show();\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar paragraph = $( \"p\" );\n\nparagraph.hide();\nparagraph.show();\n</pre>\n\n<h2>Exception</h2>\n<p>\n  Stored selections are not updated when the DOM changes. Since variables may need to updated this rule ignores selections that are repeated during an assignment.\n</p>\n<pre>\nvar paragraph = $(\"p\");\n\n// ...\n\nparagraph = $(\"p\");\n</pre>","debtCharName":"Efficiency","debtSubCharName":"Processor use","defaultDebtRemFnCoeff":"1min","effortToFixDescription":"number of times selection is re-made.","debtRemFnCoeff":"1min","debtRemFnOffset":"2min","params":[{"htmlDesc":"Number of allowed repetition before triggering an issue","type":"INTEGER","defaultValue":"2"}]},"actives":[]},{"rule":{"name":"Setters should not return values","createdAt":"2015-04-07T09:32:39+0000","severity":"CRITICAL","status":"READY","tags":[],"sysTags":["bug"],"htmlDesc":"Functions declared with the <code>set</code> keyword will automatically return the values they were passed. Thus any value explicitly returned from a setter will be ignored, and explicitly returning a value is an error.\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar person = {\n  // ...\n  set name(name) {\n    this.name = name;\n    return 42;  // Noncompliant\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar person = {\n  // ...\n  set name(name) {\n    this.name = name;\n  }\n}\n</pre>","debtCharName":"Reliability","debtSubCharName":"Instruction","debtRemFnOffset":"5min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"CRITICAL"}]},{"rule":{"name":"Short-circuit logic should be used to prevent null pointer dereferences in conditionals","createdAt":"2015-04-07T09:32:39+0000","severity":"BLOCKER","status":"READY","tags":[],"sysTags":["bug"],"htmlDesc":"When either the equality operator in a test for <code>null</code> or <code>undefined</code>, or the logical operator that follows it is reversed, the code has the appearance of safely null-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced only if it is <code>null</code>/<code>undefined</code>, leading to a guaranteed <code>TypeError</code>.\n\n<h2>Noncompliant Code Sample</h2>\n<pre>\nif (str == null &amp;&amp; str.length == 0) {\n  console.log(\"String is empty\");\n}\n\nif (str == undefined &amp;&amp; str.length == 0) {\n  console.log(\"String is empty\");\n}\n\nif (str != null || str.length > 0) {\n  console.log(\"String is not empty\");\n}\n\nif (str != undefined || str.length > 0) {\n  console.log(\"String is not empty\");\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (str != null &amp;&amp; str.length == 0) {\n  console.log(\"String is empty\");\n}\n\nif (str != undefined &amp;&amp; str.length == 0) {\n  console.log(\"String is empty\");\n}\n\nif (str == null || str.length > 0) {\n  console.log(\"String is not empty\");\n}\n\nif (str == undefined || str.length > 0) {\n  console.log(\"String is not empty\");\n}\n</pre>","debtCharName":"Reliability","debtSubCharName":"Logic","debtRemFnOffset":"2min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"BLOCKER"}]},{"rule":{"name":"Single quotes should be used for string literals","createdAt":"2013-06-19T07:34:52+0000","severity":"MINOR","status":"READY","tags":[],"sysTags":["convention"],"htmlDesc":"<p>\n  For consistency single-quotes (') are preferred to double-quotes (\").\n  This is helpful when creating strings that include HTML.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar firstParameter = \"something\";\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar firstParameter = 'something';\n</pre>","debtCharName":"Maintainability","debtSubCharName":"Readability","debtRemFnOffset":"1min"},"actives":[]},{"rule":{"name":"Source files should have a sufficient density of comment lines","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["convention"],"htmlDesc":"<p>An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.</p>","debtCharName":"Maintainability","debtSubCharName":"Understandability","defaultDebtRemFnCoeff":"2min","effortToFixDescription":"number of lines required to meet minimum density","debtRemFnCoeff":"2min","params":[{"htmlDesc":"The minimum required comment density.","type":"STRING","defaultValue":"25.0"}]},"actives":[]},{"rule":{"name":"Source files should not have any duplicated blocks","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["pitfall"],"htmlDesc":"<p>An issue is created on a file as soon as there is at least one block of duplicated code on this file.</p>","debtCharName":"Changeability","debtSubCharName":"Logic","defaultDebtRemFnCoeff":"10min","effortToFixDescription":"Number of duplicate blocks","debtRemFnCoeff":"10min","debtRemFnOffset":"10min"},"actives":[]},{"rule":{"name":"Statements should be on separate lines","createdAt":"2013-06-19T07:34:52+0000","severity":"MINOR","status":"READY","tags":[],"sysTags":["convention"],"htmlDesc":"<p>For better readability, do not put more than one statement on a single line.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif(someCondition) doSomething();\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>\n\n<h2>Exceptions</h2>\n\n<p>Anonymous functions containing a single statement are ignored.</p>\n\n<pre>\nonEvent(function() { doSomething(); });               // Compliant\nonEvent(function(p) { doSomething(); return p %2 ;}); // Noncompliant\n</pre>","debtCharName":"Maintainability","debtSubCharName":"Readability","debtRemFnOffset":"1min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MINOR"}]},{"rule":{"name":"Switch cases should end with an unconditional \"break\" statement","createdAt":"2013-06-19T07:34:52+0000","severity":"CRITICAL","status":"READY","tags":[],"sysTags":["cert","cwe","misra","pitfall"],"htmlDesc":"<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While this is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (myVariable) {\n  case 1:                              \n    foo();\n    break;\n  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?\n    doSomething();\n  default:                               \n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 1:                              \n    foo();\n    break;\n  case 2: \n    doSomething();\n    break;\n  default:                               \n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Exceptions</h2>\n\n<p>This rule is relaxed in the following cases:</p>\n<pre>\nswitch (myVariable) {\n  case 0:                                // Empty case used to specify the same behavior for a group of cases.\n  case 1:                               \n    doSomething();\n    break;\n  case 2:                                // Use of return statement\n    return;\n  case 3:                                // Use of throw statement\n    throw new IllegalStateException();\n  case 4:                                // Use of continue statement\n    continue;\n  default:                               // For the last case, use of break statement is optional \n    doSomethingElse();\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used.</li>\n<li> MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause</li>\n<li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.</li>\n<li> MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause</li>\n<li> MISRA C:2012, 16.1 - All switch statements shall be well-formed</li>\n<li> MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause</li>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/484.html\">MITRE, CWE-484</a> - Omitted Break Statement in Switch</li>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/YIFLAQ\">CERT, MSC17-C</a> - Finish every set of statements associated with a case label with a break statement</li>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZoFLAQ\">CERT, MSC18-CPP</a> - Finish every set of statements associated with a case label with a break statement</li>\n</ul>","debtCharName":"Reliability","debtSubCharName":"Logic","debtRemFnOffset":"10min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"CRITICAL"}]},{"rule":{"name":"Tabulation characters should not be used","createdAt":"2013-06-19T07:34:52+0000","severity":"MINOR","status":"READY","tags":[],"sysTags":["convention"],"htmlDesc":"<p>\nDevelopers should not need to configure the tab width of their text editors in order to be able to read source code. So the use of tabulation character must be banned.\n</p>","debtCharName":"Maintainability","debtSubCharName":"Readability","debtRemFnOffset":"2min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MINOR"}]},{"rule":{"name":"The \"changed\" property should not be manipulated directly","createdAt":"2015-07-09T16:59:47+0000","severity":"CRITICAL","status":"READY","tags":[],"sysTags":["backbone","bug"],"htmlDesc":"<p>According to the Backbone.js docs</p>\n\n<blockquote>\n  The <strong>changed</strong> property is the internal hash containing all the attributes that have changed since the last set. Please do not update <strong>changed</strong> directly since its state is\n  internally maintained by set. A copy of <strong>changed</strong> can be acquired from changedAttributes.\n</blockquote>\n\n<p>\n  The <code>changed</code> property is involved in decisions about whether or not a collection should be resorted when it is updated.\n  If you modify it manually, you can break the resorting of the collection.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nmyModel.changed = { myProperty: 1 }; // Non-compliant\n</pre>","debtCharName":"Reliability","debtSubCharName":"Data","debtRemFnOffset":"30min"},"actives":[]},{"rule":{"name":"The base should be provided to \"parseInt\"","createdAt":"2015-04-07T09:32:39+0000","severity":"CRITICAL","status":"READY","tags":[],"sysTags":["bug"],"htmlDesc":"<p>The <code>parseInt</code> function has two versions, one that takes a base value as a second argument and one that does not, and using the single-arg version can result in unexpected results on older browsers. </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nparseInt(\"010\");  // Noncompliant; pre-2013 browsers may return 8 \n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nparseInt(\"010\", 10);\n</pre>","debtCharName":"Reliability","debtSubCharName":"Instruction","debtRemFnOffset":"2min"},"actives":[]},{"rule":{"name":"The global \"this\" object should not be used","createdAt":"2015-07-09T16:59:47+0000","severity":"CRITICAL","status":"READY","tags":[],"sysTags":["pitfall"],"htmlDesc":"<p>\n  When the keyword <code>this</code> is used outside of an object, it refers to the global <code>this</code> object,\n  which is the same thing as the <code>window</code> object in a standard web page. Clearly, such a misdirected usage\n  could have unintended consequences, as well as being confusing to maintainers. Instead, simply drop the <code>this</code>;\n  it will have the same effect.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nthis.foo = 1;   // Noncompliant\nconsole.log(this.foo); // Noncompliant\n\nfunction MyObj() {\n  this.foo = 1; // Compliant\n}\n\nMyObj.func1 = function() {\n  if (this.foo == 1) { // Compliant\n    // ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nfoo = 1;\nconsole.log(foo);\n\nfunction MyObj() {\n  this.foo = 1;\n}\n\nMyObj.func1 = function() {\n  if (this.foo == 1) {\n    // ...\n  }\n}\n</pre>","debtCharName":"Reliability","debtSubCharName":"Instruction","debtRemFnOffset":"5min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"CRITICAL"}]},{"rule":{"name":"The names of model properties should not contains spaces","createdAt":"2015-04-07T09:32:39+0000","severity":"CRITICAL","status":"READY","tags":[],"sysTags":["backbone","bug"],"htmlDesc":"<p>\n  When using the Backbone.js framework, the names of model attributes should not contain spaces. This is because the Events object accepts space-delimited lists of events, so an attributes with spaces in the names could be misinterpreted.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nPerson = Backbone.Model.extend({\n        defaults: {\n            'first name': 'Bob',      // Noncompliant\n            'birth date': new Date()  // Noncompliant\n        },\n    });\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nPerson = Backbone.Model.extend({\n        defaults: {\n            firstName: 'Bob',\n            birthDate: new Date()\n        },\n    });\n</pre>","debtCharName":"Reliability","debtSubCharName":"Data","debtRemFnOffset":"5min"},"actives":[]},{"rule":{"name":"Trailing commas should not be used","createdAt":"2013-06-19T07:34:52+0000","severity":"BLOCKER","status":"READY","tags":[],"sysTags":["cross-browser"],"htmlDesc":"<p>\n  Most browsers parse and discard a meaningless, trailing comma. Unfortunately, that's not the case for Internet Explorer, which in most versions throws a meaningless error. Therefore trailing commas should be eliminated.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvar settings = {\n    'foo'  : oof,\n    'bar' : rab,    // Noncompliant - trailing comma\n};\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar settings = {\n    'foo'  : oof,\n    'bar' : rab\n};\n</pre>","debtCharName":"Reliability","debtSubCharName":"Instruction","debtRemFnOffset":"1min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"BLOCKER"}]},{"rule":{"name":"Two branches in the same conditional structure should not have exactly the same implementation","createdAt":"2015-04-07T09:32:39+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["bug"],"htmlDesc":"<p>\nHaving two <code>cases</code> in the same <code>switch</code> statement or branches in the same <code>if</code> structure  with the same implementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then they should be combined, for an <code>if</code> structure or one should fall through to the other for a <code>switch</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (i) {\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1's implementation\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a >= 0 && a < 10) {\n  doTheThing();\nelse if (a >= 10 && a < 20) {\n  doTheOtherThing();\n}\nelse if (a >= 20 && a < 50) {\n  doTheThing();  // Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nswitch (i) {\n  case 1:\n  case 3:\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  default:\n    doTheRest();\n}\n\nif ((a >= 0 && a < 10) || (a >= 20 && a < 50)) {\n  doTheThing();\nelse if (a >= 10 && a < 20) {\n  doTheOtherThing();\n}\nelse {\n  doTheRest();\n}\n</pre>\n\n<p>or</p>\n\n<pre>\nswitch (i) {\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:\n    doThirdThing();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a >= 0 && a < 10) {\n  doTheThing();\nelse if (a >= 10 && a < 20) {\n  doTheOtherThing();\n}\nelse if (a >= 20 && a < 50) {\n  doTheThirdThing();\n}\nelse {\n  doTheRest();\n}\n</pre>","debtCharName":"Reliability","debtSubCharName":"Logic","debtRemFnOffset":"10min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR"}]},{"rule":{"name":"Universal selectors should not be used","createdAt":"2015-05-20T05:01:36+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["jquery","performance","user-experience"],"htmlDesc":"<p>\n  Element selections that could be matched anywhere in the document can be very slow. That's why use of the universal selector, <code>*</code>, should be limited; it explicitly\n  specifies that the match could be anywhere.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>$( \".buttons > *\" );  // Noncompliant; extremely expensive</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>$( \".buttons\" ).children(); // Compliant</pre>","debtCharName":"Efficiency","debtSubCharName":"Processor use","debtRemFnOffset":"10min"},"actives":[]},{"rule":{"name":"Unused function parameters should be removed","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["misra","unused"],"htmlDesc":"<p>\n  Unused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction doSomething(a, b) { // \"a\" is unused\n  return compute(b);\n}\n</pre>\n\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething(b) {\n  return compute(b);\n}\n</pre>\n\n\n\n<h2>Exceptions</h2>\n<p>\n  When writing function callbacks, some arguments might be required as part of the function signature, but not actually needed by the callback code.\n  For instance, JQuery has the 'each' helper to iterate over arrays or objects, but using the counter 'i' should remain optional:\n</p>\n<pre>\n$([\"first\", \"last\"]).each(function (i, value) {\n  computeSomethingWithValue(value);\n});\n</pre>\n<p>\n  So only unused arguments listed at the end of the argument list will be flagged with issues because they could be omitted from the function signature.\n  Unused arguments which are followed by an argument that _is_ used will be ignored.\n</p>\n<p>\n  Examples :\n</p>\n<pre>\nvar myFirsCallBackFunction = function (p1, p2, p3, p4) {  //unused p2 is not reported but p4 is\n                                              return p1 + p3; }\n\nvar mySecondCallBackFunction = function (p1, p2, p3, p4) {  //unused p1, p2 and p3 are not reported\n                                              return p4; }\n\nvar myThirdCallBackFunction = function (p1, p2, p3, p4) {  //unused p1 is not reported but p3 and p4 are\n                                              return p2; }\n</pre>\n<p>\n  Further, when <code>arguments</code> is used in the function body, no parameter is reported as unused.\n</p>\n<pre>\nfunction doSomething(a, b, c) {\n  compute(arguments);\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n<li> MISRA C++:2008, 0-1-11</li>\n<li> MISRA C:2012, 2.7</li>\n</ul>","debtCharName":"Maintainability","debtSubCharName":"Understandability","debtRemFnOffset":"5min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR"}]},{"rule":{"name":"Unused local variables should be removed","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["unused"],"htmlDesc":"<p>\n  If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will not wonder what the variable is used for.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction numberOfMinutes(hours) {\n  var seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction numberOfMinutes(hours) {\n  return hours * 60;\n}\n</pre>","debtCharName":"Maintainability","debtSubCharName":"Understandability","debtRemFnOffset":"5min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR"}]},{"rule":{"name":"Useless \"if(true) {...}\" and \"if(false){...}\" blocks should be removed","createdAt":"2014-01-24T08:40:40+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["bug","cwe","misra","security"],"htmlDesc":"<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code> statements with conditions that are always true are completely redundant, and make the code less readable.</p>\n<p>There are three possible causes for the presence of such code: </p>\n<ul>\n<li> An if statement was changed during debugging and that debug code has been committed.</li>\n<li> Some value was left unset.</li>\n<li> Some logic is not doing what the programmer thought it did.</li>\n</ul>\n<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif (true) {  // Noncompliant\n  doSomething();\n}\n...\nif (false) {  // Noncompliant\n  doSomethingElse();\n}\n\nif (!options || options === true) { doThirdThing(); }  // Noncompliant; always true\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\ndoSomething();\n\ndoThirdThing();\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code</li>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/570.html\">MITRE, CWE-570</a> - Expression is Always False</li>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/571.html\">MITRE, CWE-571</a> - Expression is Always True</li>\n<li> MISRA C:2004, 13.7</li>\n<li> MISRA C:2012, 14.3</li>\n</ul>","debtCharName":"Maintainability","debtSubCharName":"Readability","debtRemFnOffset":"2min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR"}]},{"rule":{"name":"Useless parentheses around expressions should be removed to prevent any misunderstanding","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["confusing"],"htmlDesc":"<p>Useless parentheses can sometimes be misleading and so should be removed. </p>\n<p>The following code snippet illustrates this rule:</p>\n<pre>\nreturn 3;             // Compliant\nreturn (x);           // Non-Compliant\nreturn (x + 1);       // Non-Compliant\nint x = (y / 2 + 1);  // Non-Compliant\nint y = (4+X) * y;    // Compliant\n</pre>","debtCharName":"Maintainability","debtSubCharName":"Readability","debtRemFnOffset":"1min"},"actives":[]},{"rule":{"name":"Values should not be uselessly incremented","createdAt":"2015-04-07T09:32:39+0000","severity":"CRITICAL","status":"READY","tags":[],"sysTags":["bug"],"htmlDesc":"A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar i = 0;\ni = i++; // Noncompliant; i is still zero\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar i = 0;\ni++;\n</pre>","debtCharName":"Reliability","debtSubCharName":"Logic","debtRemFnOffset":"5min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"CRITICAL"}]},{"rule":{"name":"Variables and functions should not be redeclared","createdAt":"2015-05-20T05:01:36+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["bug","pitfall"],"htmlDesc":"<p>\n  This rule checks that a declaration doesn't use a name that is already in use. Indeed, it is possible to declare multiple variables and/or functions with the same name,\n  but it's hard to predict which declaration will be kept by the JavaScript interpreter.\n</p>\n\n<p>Typically, this kind of re-declaration is an error, and can lead to bugs and more generally to confusing code.</p>\n\n<p>This rule also applies to function parameters.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvar a = 'foo';\nfunction a() {}   // Noncompliant\nconsole.log(a);   // prints \"foo\"\n\nfunction myFunc(arg) {\n  var arg = \"event\"; // Noncompliant, argument value is lost\n}\n\nfun(); // prints \"bar\"\n\nfunction fun() {\n  console.log(\"foo\");\n}\n\nfun(); // prints \"bar\"\n\nfunction fun() {  // Noncompliant\n  console.log(\"bar\");\n}\n\nfun(); // prints \"bar\"\n</pre>\n\n\n<h2>Compliant Solution</h2>\n\n<pre>\nvar a = 'foo';\nfunction otherName() {}\nconsole.log(a);\n\nfunction myFunc(arg) {\n  var newName = \"event\";\n}\n\nfun(); // prints \"foo\"\n\nfunction fun() {\n  print(\"foo\");\n}\n\nfun(); // prints \"foo\"\n\nfunction printBar() {\n  print(\"bar\");\n}\n\nprintBar(); // prints \"bar\"\n</pre>","debtCharName":"Reliability","debtSubCharName":"Logic","debtRemFnOffset":"20min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR"}]},{"rule":{"name":"Variables should always be declared with \"var\"","createdAt":"2015-05-20T05:01:36+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["pitfall"],"htmlDesc":"<p>\n  JavaScript variable scope can be particularly difficult to understand and get right.\n  The situation gets even worse when you consider the accidental creation of global variables,\n  which is what happens when you declare a variable inside a method or the <code>for</code> clause of a for-loop without using the <code>var</code> keyword.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfunction f(){\n  i = 1;         // Noncompliant; i is global\n\n  for (j = 0; j < array.length; j++) {  // Noncompliant; j is global now too\n    // ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nfunction f(){\n  var i = 1;\n\n  for (var j = 0; j < array.length; j++) {\n    // ...\n  }\n}\n</pre>","debtCharName":"Reliability","debtSubCharName":"Logic","debtRemFnOffset":"2min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR"}]},{"rule":{"name":"Variables should be declared before they are used","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["pitfall"],"htmlDesc":"<p>One of the biggest sources of confusion for JavaScript beginners is scoping. The reason scoping is so confusing in JavaScript is because JavaScript looks like a C-family language but doesn't act like one. C-family languages have block-level scope, meaning that when control enters a block, such as an <code>if</code> statement, new variables can be declared within that scope without affecting the outer scope. However, this is not the case in JavaScript.</p>\n<p>To minimize confusion as much as possible, variables should always be declared before they are used.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvar x = 1;\n\nfunction fun(){\n  alert(x); // Noncompliant as x is declared later in the same scope\n  if(something) {\n    var x = 42; // Declaration in function scope (not block scope!) shadows global variable\n  }\n}\n\nfun(); // Unexpectedly alerts \"undefined\" instead of \"1\"\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nvar x = 1;\n\nfunction fun() {\n  print(x);\n  if (something) {\n    x = 42;\n  }\n}\n\nfun(); // Print \"1\"\n</pre>","debtCharName":"Reliability","debtSubCharName":"Logic","debtRemFnOffset":"10min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR"}]},{"rule":{"name":"Variables should not be self-assigned","createdAt":"2015-04-07T09:32:39+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["bug","cert"],"htmlDesc":"<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake and some other value or variable was intended for the assignment instead.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction setName(name) {\n    name = name;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction setName(name) {\n    this.name = name;\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li><a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C</a> - Detect and remove code that has no effect</li>\n<li><a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP</a> - Detect and remove code that has no effect</li>\n</ul>","debtCharName":"Reliability","debtSubCharName":"Data","debtRemFnOffset":"3min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR"}]},{"rule":{"name":"Variables should not be shadowed","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["pitfall"],"htmlDesc":"<p>\n  Overriding a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of code. Further, it could lead maintainers to introduce bugs because they think they're using one variable but are really using another.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nshow: function(point, element) {\n  if (!this.drops.length) return;\n  var drop, affected = [];\n  this.drops.each( function(drop) {  // Non-Compliant; defines a new 'drop' parameter\n    if(Droppables.isAffected(point, element, drop))\n      affected.push(drop);\n  });\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nshow: function(point, element) {\n  if (!this.drops.length) return;\n  var drop, affected = [];\n  this.drops.each( function(aDrop) {\n    if(Droppables.isAffected(point, element, aDrop))\n      affected.push(aDrop);\n  });\n</pre>","debtCharName":"Maintainability","debtSubCharName":"Understandability","debtRemFnOffset":"10min"},"actives":[]},{"rule":{"name":"Web SQL databases should not be used","createdAt":"2015-07-09T16:59:47+0000","severity":"CRITICAL","status":"READY","tags":[],"sysTags":["html5","owasp-a6","owasp-a9","security"],"htmlDesc":"<p>\n  The Web SQL Database standard never saw the light of day. It was first formulated, then deprecated by the W3C and was only implemented in some browsers. (It is not supported in\n  Firefox or IE.)\n</p>\n\n<p>\n  Further, the use of a Web SQL Database poses security concerns, since you only need its name to access such a database.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvar db = window.openDatabase(\"myDb\", \"1.0\", \"Personal secrets stored here\", 2*1024*1024);  // Noncompliant\n</pre>\n\n<h2>See</h2>\n<ul>\n  <li><a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure</li>\n  <li><a href=\"https://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities\">OWASP Top Ten 2013 Category A9</a> - Using Components with Known Vulnerabilities</li>\n</ul>","debtCharName":"Security","debtSubCharName":"Security features","debtRemFnOffset":"2h"},"actives":[]},{"rule":{"name":"Wrapper objects should not be used for primitive types","createdAt":"2013-06-19T07:34:52+0000","severity":"MAJOR","status":"READY","tags":[],"sysTags":["pitfall"],"htmlDesc":"<p>\n  The use of wrapper objects for primitive types is gratuitous, confusing and dangerous. Simple literals should be used instead.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x = new Boolean(false);\nif (x) {\n  alert('hi');  // Shows 'hi'.\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar x = false;\nif (x) {\n  alert('hi');\n}\n</pre>","debtCharName":"Reliability","debtSubCharName":"Instruction","debtRemFnOffset":"1min"},"actives":[{"qProfile":"js-sonar-way-56838","inherit":"NONE","severity":"MAJOR"}]}]